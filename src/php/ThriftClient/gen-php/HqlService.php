<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Hql/Hql_types.php';
include_once $GLOBALS['THRIFT_ROOT'].'/packages/Client/ClientService.php';

interface HqlServiceIf extends ClientServiceIf {
  public function hql_exec($command, $noflush, $unbuffered);
}

class HqlServiceClient extends ClientServiceClient implements HqlServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function hql_exec($command, $noflush, $unbuffered)
  {
    $this->send_hql_exec($command, $noflush, $unbuffered);
    return $this->recv_hql_exec();
  }

  public function send_hql_exec($command, $noflush, $unbuffered)
  {
    $args = new HqlService_hql_exec_args();
    $args->command = $command;
    $args->noflush = $noflush;
    $args->unbuffered = $unbuffered;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hql_exec', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hql_exec', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hql_exec()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'HqlService_hql_exec_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new HqlService_hql_exec_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new Exception("hql_exec failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class HqlService_hql_exec_args {
  static $_TSPEC;

  public $command = null;
  public $noflush = false;
  public $unbuffered = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'command',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'noflush',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'unbuffered',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['command'])) {
        $this->command = $vals['command'];
      }
      if (isset($vals['noflush'])) {
        $this->noflush = $vals['noflush'];
      }
      if (isset($vals['unbuffered'])) {
        $this->unbuffered = $vals['unbuffered'];
      }
    }
  }

  public function getName() {
    return 'HqlService_hql_exec_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->command);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->noflush);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->unbuffered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HqlService_hql_exec_args');
    if ($this->command !== null) {
      $xfer += $output->writeFieldBegin('command', TType::STRING, 1);
      $xfer += $output->writeString($this->command);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->noflush !== null) {
      $xfer += $output->writeFieldBegin('noflush', TType::BOOL, 2);
      $xfer += $output->writeBool($this->noflush);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unbuffered !== null) {
      $xfer += $output->writeFieldBegin('unbuffered', TType::BOOL, 3);
      $xfer += $output->writeBool($this->unbuffered);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HqlService_hql_exec_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'HqlResult',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => 'ClientException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'HqlService_hql_exec_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new HqlResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new ClientException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HqlService_hql_exec_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HqlServiceProcessor extends ClientServiceProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_hql_exec($seqid, $input, $output) {
    $args = new HqlService_hql_exec_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new HqlService_hql_exec_result();
    try {
      $result->success = $this->handler_->hql_exec($args->command, $args->noflush, $args->unbuffered);
    } catch (ClientException $e) {
      $result->e = $e;
    }
    $output->writeMessageBegin('hql_exec', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
}
?>
