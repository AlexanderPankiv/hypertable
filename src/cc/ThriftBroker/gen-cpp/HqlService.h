/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef HqlService_H
#define HqlService_H

#include <TProcessor.h>
#include "Hql_types.h"
#include "ClientService.h"

namespace Hypertable { namespace ThriftGen {

class HqlServiceIf : virtual public Hypertable::ThriftGen::ClientServiceIf {
 public:
  virtual ~HqlServiceIf() {}
  virtual void hql_exec(HqlResult& _return, const std::string& command, const bool noflush, const bool unbuffered) = 0;
};

class HqlServiceNull : virtual public HqlServiceIf , virtual public Hypertable::ThriftGen::ClientServiceNull {
 public:
  virtual ~HqlServiceNull() {}
  void hql_exec(HqlResult& /* _return */, const std::string& /* command */, const bool /* noflush */, const bool /* unbuffered */) {
    return;
  }
};

class HqlService_hql_exec_args {
 public:

  HqlService_hql_exec_args() : command(""), noflush(false), unbuffered(false) {
  }

  virtual ~HqlService_hql_exec_args() throw() {}

  std::string command;
  bool noflush;
  bool unbuffered;

  struct __isset {
    __isset() : command(false), noflush(false), unbuffered(false) {}
    bool command;
    bool noflush;
    bool unbuffered;
  } __isset;

  bool operator == (const HqlService_hql_exec_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    if (!(noflush == rhs.noflush))
      return false;
    if (!(unbuffered == rhs.unbuffered))
      return false;
    return true;
  }
  bool operator != (const HqlService_hql_exec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HqlService_hql_exec_args & ) const;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class HqlService_hql_exec_pargs {
 public:


  virtual ~HqlService_hql_exec_pargs() throw() {}

  const std::string* command;
  const bool* noflush;
  const bool* unbuffered;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class HqlService_hql_exec_result {
 public:

  HqlService_hql_exec_result() {
  }

  virtual ~HqlService_hql_exec_result() throw() {}

  HqlResult success;
  Hypertable::ThriftGen::ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  bool operator == (const HqlService_hql_exec_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const HqlService_hql_exec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HqlService_hql_exec_result & ) const;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class HqlService_hql_exec_presult {
 public:


  virtual ~HqlService_hql_exec_presult() throw() {}

  HqlResult* success;
  Hypertable::ThriftGen::ClientException e;

  struct __isset {
    __isset() : success(false), e(false) {}
    bool success;
    bool e;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class HqlServiceClient : virtual public HqlServiceIf, public Hypertable::ThriftGen::ClientServiceClient {
 public:
  HqlServiceClient(boost::shared_ptr<facebook::thrift::protocol::TProtocol> prot) :
    Hypertable::ThriftGen::ClientServiceClient(prot, prot) {}
  HqlServiceClient(boost::shared_ptr<facebook::thrift::protocol::TProtocol> iprot, boost::shared_ptr<facebook::thrift::protocol::TProtocol> oprot) :
    Hypertable::ThriftGen::ClientServiceClient(iprot, oprot) {}
  boost::shared_ptr<facebook::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<facebook::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void hql_exec(HqlResult& _return, const std::string& command, const bool noflush, const bool unbuffered);
  void send_hql_exec(const std::string& command, const bool noflush, const bool unbuffered);
  void recv_hql_exec(HqlResult& _return);
};

class HqlServiceProcessor : virtual public facebook::thrift::TProcessor, public Hypertable::ThriftGen::ClientServiceProcessor {
 protected:
  boost::shared_ptr<HqlServiceIf> iface_;
  virtual bool process_fn(facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (HqlServiceProcessor::*)(int32_t, facebook::thrift::protocol::TProtocol*, facebook::thrift::protocol::TProtocol*)> processMap_;
  void process_hql_exec(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
 public:
  HqlServiceProcessor(boost::shared_ptr<HqlServiceIf> iface) :
    Hypertable::ThriftGen::ClientServiceProcessor(iface),
    iface_(iface) {
    processMap_["hql_exec"] = &HqlServiceProcessor::process_hql_exec;
  }

  virtual bool process(boost::shared_ptr<facebook::thrift::protocol::TProtocol> piprot, boost::shared_ptr<facebook::thrift::protocol::TProtocol> poprot);
  virtual ~HqlServiceProcessor() {}
};

class HqlServiceMultiface : virtual public HqlServiceIf, public Hypertable::ThriftGen::ClientServiceMultiface {
 public:
  HqlServiceMultiface(std::vector<boost::shared_ptr<HqlServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<HqlServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      Hypertable::ThriftGen::ClientServiceMultiface::add(*iter);
    }
  }
  virtual ~HqlServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HqlServiceIf> > ifaces_;
  HqlServiceMultiface() {}
  void add(boost::shared_ptr<HqlServiceIf> iface) {
    Hypertable::ThriftGen::ClientServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void hql_exec(HqlResult& _return, const std::string& command, const bool noflush, const bool unbuffered) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->hql_exec(_return, command, noflush, unbuffered);
        return;
      } else {
        ifaces_[i]->hql_exec(_return, command, noflush, unbuffered);
      }
    }
  }

};

}} // namespace

#endif
