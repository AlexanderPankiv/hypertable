#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class CellFlag:
  DELETE_ROW = 0
  DELETE_CF = 1
  DELETE_CELL = 2
  INSERT = 255

class RowInterval:

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'start_row', None, None, ), # 1
    (2, TType.BOOL, 'start_inclusive', None, None, ), # 2
    (3, TType.STRING, 'end_row', None, None, ), # 3
    (4, TType.BOOL, 'end_inclusive', None, None, ), # 4
  )

  def __init__(self, d=None):
    self.start_row = None
    self.start_inclusive = True
    self.end_row = None
    self.end_inclusive = True
    if isinstance(d, dict):
      if 'start_row' in d:
        self.start_row = d['start_row']
      if 'start_inclusive' in d:
        self.start_inclusive = d['start_inclusive']
      if 'end_row' in d:
        self.end_row = d['end_row']
      if 'end_inclusive' in d:
        self.end_inclusive = d['end_inclusive']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.start_row = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.start_inclusive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.end_row = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.end_inclusive = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RowInterval')
    if self.start_row != None:
      oprot.writeFieldBegin('start_row', TType.STRING, 1)
      oprot.writeString(self.start_row)
      oprot.writeFieldEnd()
    if self.start_inclusive != None:
      oprot.writeFieldBegin('start_inclusive', TType.BOOL, 2)
      oprot.writeBool(self.start_inclusive)
      oprot.writeFieldEnd()
    if self.end_row != None:
      oprot.writeFieldBegin('end_row', TType.STRING, 3)
      oprot.writeString(self.end_row)
      oprot.writeFieldEnd()
    if self.end_inclusive != None:
      oprot.writeFieldBegin('end_inclusive', TType.BOOL, 4)
      oprot.writeBool(self.end_inclusive)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self):
    return str(self.__dict__)

  def __repr__(self):
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CellInterval:

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'start_row', None, None, ), # 1
    (2, TType.STRING, 'start_column', None, None, ), # 2
    (3, TType.BOOL, 'start_inclusive', None, None, ), # 3
    (4, TType.STRING, 'end_row', None, None, ), # 4
    (5, TType.STRING, 'end_column', None, None, ), # 5
    (6, TType.BOOL, 'end_inclusive', None, None, ), # 6
  )

  def __init__(self, d=None):
    self.start_row = None
    self.start_column = None
    self.start_inclusive = True
    self.end_row = None
    self.end_column = None
    self.end_inclusive = True
    if isinstance(d, dict):
      if 'start_row' in d:
        self.start_row = d['start_row']
      if 'start_column' in d:
        self.start_column = d['start_column']
      if 'start_inclusive' in d:
        self.start_inclusive = d['start_inclusive']
      if 'end_row' in d:
        self.end_row = d['end_row']
      if 'end_column' in d:
        self.end_column = d['end_column']
      if 'end_inclusive' in d:
        self.end_inclusive = d['end_inclusive']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.start_row = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.start_column = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.start_inclusive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.end_row = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_column = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.end_inclusive = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CellInterval')
    if self.start_row != None:
      oprot.writeFieldBegin('start_row', TType.STRING, 1)
      oprot.writeString(self.start_row)
      oprot.writeFieldEnd()
    if self.start_column != None:
      oprot.writeFieldBegin('start_column', TType.STRING, 2)
      oprot.writeString(self.start_column)
      oprot.writeFieldEnd()
    if self.start_inclusive != None:
      oprot.writeFieldBegin('start_inclusive', TType.BOOL, 3)
      oprot.writeBool(self.start_inclusive)
      oprot.writeFieldEnd()
    if self.end_row != None:
      oprot.writeFieldBegin('end_row', TType.STRING, 4)
      oprot.writeString(self.end_row)
      oprot.writeFieldEnd()
    if self.end_column != None:
      oprot.writeFieldBegin('end_column', TType.STRING, 5)
      oprot.writeString(self.end_column)
      oprot.writeFieldEnd()
    if self.end_inclusive != None:
      oprot.writeFieldBegin('end_inclusive', TType.BOOL, 6)
      oprot.writeBool(self.end_inclusive)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self):
    return str(self.__dict__)

  def __repr__(self):
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ScanSpec:

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'row_intervals', (TType.STRUCT,(RowInterval, RowInterval.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'cell_intervals', (TType.STRUCT,(CellInterval, CellInterval.thrift_spec)), None, ), # 2
    (3, TType.BOOL, 'return_deletes', None, None, ), # 3
    (4, TType.I32, 'revs', None, None, ), # 4
    (5, TType.I32, 'row_limit', None, None, ), # 5
    (6, TType.I64, 'start_time', None, None, ), # 6
    (7, TType.I64, 'end_time', None, None, ), # 7
  )

  def __init__(self, d=None):
    self.row_intervals = None
    self.cell_intervals = None
    self.return_deletes = False
    self.revs = 0
    self.row_limit = 0
    self.start_time = None
    self.end_time = None
    if isinstance(d, dict):
      if 'row_intervals' in d:
        self.row_intervals = d['row_intervals']
      if 'cell_intervals' in d:
        self.cell_intervals = d['cell_intervals']
      if 'return_deletes' in d:
        self.return_deletes = d['return_deletes']
      if 'revs' in d:
        self.revs = d['revs']
      if 'row_limit' in d:
        self.row_limit = d['row_limit']
      if 'start_time' in d:
        self.start_time = d['start_time']
      if 'end_time' in d:
        self.end_time = d['end_time']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.row_intervals = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = RowInterval()
            _elem5.read(iprot)
            self.row_intervals.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.cell_intervals = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = CellInterval()
            _elem11.read(iprot)
            self.cell_intervals.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.return_deletes = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.revs = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.row_limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.start_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.end_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ScanSpec')
    if self.row_intervals != None:
      oprot.writeFieldBegin('row_intervals', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.row_intervals))
      for iter12 in self.row_intervals:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cell_intervals != None:
      oprot.writeFieldBegin('cell_intervals', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.cell_intervals))
      for iter13 in self.cell_intervals:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.return_deletes != None:
      oprot.writeFieldBegin('return_deletes', TType.BOOL, 3)
      oprot.writeBool(self.return_deletes)
      oprot.writeFieldEnd()
    if self.revs != None:
      oprot.writeFieldBegin('revs', TType.I32, 4)
      oprot.writeI32(self.revs)
      oprot.writeFieldEnd()
    if self.row_limit != None:
      oprot.writeFieldBegin('row_limit', TType.I32, 5)
      oprot.writeI32(self.row_limit)
      oprot.writeFieldEnd()
    if self.start_time != None:
      oprot.writeFieldBegin('start_time', TType.I64, 6)
      oprot.writeI64(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time != None:
      oprot.writeFieldBegin('end_time', TType.I64, 7)
      oprot.writeI64(self.end_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self):
    return str(self.__dict__)

  def __repr__(self):
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Cell:

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'row_key', None, None, ), # 1
    (2, TType.STRING, 'column_family', None, None, ), # 2
    (3, TType.STRING, 'column_qualifier', None, None, ), # 3
    (4, TType.STRING, 'value', None, None, ), # 4
    (5, TType.I64, 'timestamp', None, None, ), # 5
    (6, TType.I64, 'revision', None, None, ), # 6
    (7, TType.I16, 'flag', None, None, ), # 7
  )

  def __init__(self, d=None):
    self.row_key = None
    self.column_family = None
    self.column_qualifier = None
    self.value = None
    self.timestamp = None
    self.revision = None
    self.flag = 255
    if isinstance(d, dict):
      if 'row_key' in d:
        self.row_key = d['row_key']
      if 'column_family' in d:
        self.column_family = d['column_family']
      if 'column_qualifier' in d:
        self.column_qualifier = d['column_qualifier']
      if 'value' in d:
        self.value = d['value']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'revision' in d:
        self.revision = d['revision']
      if 'flag' in d:
        self.flag = d['flag']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.row_key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.column_family = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.column_qualifier = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.revision = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.flag = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Cell')
    if self.row_key != None:
      oprot.writeFieldBegin('row_key', TType.STRING, 1)
      oprot.writeString(self.row_key)
      oprot.writeFieldEnd()
    if self.column_family != None:
      oprot.writeFieldBegin('column_family', TType.STRING, 2)
      oprot.writeString(self.column_family)
      oprot.writeFieldEnd()
    if self.column_qualifier != None:
      oprot.writeFieldBegin('column_qualifier', TType.STRING, 3)
      oprot.writeString(self.column_qualifier)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.STRING, 4)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I64, 5)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.revision != None:
      oprot.writeFieldBegin('revision', TType.I64, 6)
      oprot.writeI64(self.revision)
      oprot.writeFieldEnd()
    if self.flag != None:
      oprot.writeFieldBegin('flag', TType.I16, 7)
      oprot.writeI16(self.flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self):
    return str(self.__dict__)

  def __repr__(self):
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientException(Exception):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'code', None, None, ), # 1
    (2, TType.STRING, 'what', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.code = None
    self.what = None
    if isinstance(d, dict):
      if 'code' in d:
        self.code = d['code']
      if 'what' in d:
        self.what = d['what']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.what = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientException')
    if self.code != None:
      oprot.writeFieldBegin('code', TType.I32, 1)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    if self.what != None:
      oprot.writeFieldBegin('what', TType.STRING, 2)
      oprot.writeString(self.what)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self):
    return str(self.__dict__)

  def __repr__(self):
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

