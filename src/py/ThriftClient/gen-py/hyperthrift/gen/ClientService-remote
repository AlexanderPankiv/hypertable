#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ClientService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void create_table(string name, string schema)'
  print '  Scanner open_scanner(string name, ScanSpec scan_spec)'
  print '  void close_scanner(Scanner scanner)'
  print '   next_cells(Scanner scanner)'
  print '   get_row(string name, string row)'
  print '  Value get_cell(string name, string row, string column)'
  print '   get_cells(string name, ScanSpec scan_spec)'
  print '  Mutator open_mutator(string name)'
  print '  void close_mutator(Mutator mutator, bool flush)'
  print '  void set_cell(Mutator mutator, Cell cell)'
  print '  void set_cells(Mutator mutator,  cells)'
  print '  void flush_mutator(Mutator mutator)'
  print '  i32 get_table_id(string name)'
  print '  string get_schema(string name)'
  print '   get_tables()'
  print '  void drop_table(string name, bool if_exists)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ClientService.Client(protocol)
transport.open()

if cmd == 'create_table':
  if len(args) != 2:
    print 'create_table requires 2 args'
    sys.exit(1)
  pp.pprint(client.create_table(args[0],args[1],))

elif cmd == 'open_scanner':
  if len(args) != 2:
    print 'open_scanner requires 2 args'
    sys.exit(1)
  pp.pprint(client.open_scanner(args[0],eval(args[1]),))

elif cmd == 'close_scanner':
  if len(args) != 1:
    print 'close_scanner requires 1 args'
    sys.exit(1)
  pp.pprint(client.close_scanner(eval(args[0]),))

elif cmd == 'next_cells':
  if len(args) != 1:
    print 'next_cells requires 1 args'
    sys.exit(1)
  pp.pprint(client.next_cells(eval(args[0]),))

elif cmd == 'get_row':
  if len(args) != 2:
    print 'get_row requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_row(args[0],args[1],))

elif cmd == 'get_cell':
  if len(args) != 3:
    print 'get_cell requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_cell(args[0],args[1],args[2],))

elif cmd == 'get_cells':
  if len(args) != 2:
    print 'get_cells requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_cells(args[0],eval(args[1]),))

elif cmd == 'open_mutator':
  if len(args) != 1:
    print 'open_mutator requires 1 args'
    sys.exit(1)
  pp.pprint(client.open_mutator(args[0],))

elif cmd == 'close_mutator':
  if len(args) != 2:
    print 'close_mutator requires 2 args'
    sys.exit(1)
  pp.pprint(client.close_mutator(eval(args[0]),eval(args[1]),))

elif cmd == 'set_cell':
  if len(args) != 2:
    print 'set_cell requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_cell(eval(args[0]),eval(args[1]),))

elif cmd == 'set_cells':
  if len(args) != 2:
    print 'set_cells requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_cells(eval(args[0]),eval(args[1]),))

elif cmd == 'flush_mutator':
  if len(args) != 1:
    print 'flush_mutator requires 1 args'
    sys.exit(1)
  pp.pprint(client.flush_mutator(eval(args[0]),))

elif cmd == 'get_table_id':
  if len(args) != 1:
    print 'get_table_id requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_table_id(args[0],))

elif cmd == 'get_schema':
  if len(args) != 1:
    print 'get_schema requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_schema(args[0],))

elif cmd == 'get_tables':
  if len(args) != 0:
    print 'get_tables requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_tables())

elif cmd == 'drop_table':
  if len(args) != 2:
    print 'drop_table requires 2 args'
    sys.exit(1)
  pp.pprint(client.drop_table(args[0],eval(args[1]),))

transport.close()
