'use strict';
var Int64 = require('node-int64');

//
// Timestamp
//

/**
 * Constructor accepts any of the following argument types:
 *
 * new Timestamp(buffer[, offset=0]) - Existing Buffer with byte offset
 * new Timestamp(Uint8Array[, offset=0]) - Existing Uint8Array with a byte offset
 * new Timestamp(string)             - Hex string (throws if n is outside int64 range)
 * new Timestamp(number)             - Number (throws if n is outside int64 range)
 * new Timestamp(hi, lo)             - Raw bits as two 32-bit values
 */
var Timestamp = module.exports = function(a1, a2) {
  Int64.call(this, a1, a2);
  // If a1 is a Buffer or Uint8Array, flip the bytes
  if (a1 instanceof Buffer ||
      Object.prototype.toString.call(a1) == '[object Uint8Array]') {
    for (var i=0; i<4; i++) {
      var tmp = this.buffer[this.offset+i];
      this.buffer[this.offset+i] = this.buffer[this.offset+(7-i)];
      this.buffer[this.offset+(7-i)] = tmp;
    }
  }
};

Timestamp.prototype = Object.create(Int64.prototype);

Timestamp.prototype.constructor = Timestamp;

/**
 * Returns the int64's 8 bytes in Little-endian order as a buffer.
 */
Timestamp.prototype.toBuffer = function () {
  var out = new Buffer(8);
  for (var i=0; i<8; i++)
    out[i] = this.buffer[this.offset+(7-i)];
  return out;
};

/**
 * Copy 8 bytes of int64 in little-endian order into target buffer at target offset.
 *
 * @param {Buffer} targetBuffer       Buffer to copy into.
 * @param {number} [targetOffset=0]   Offset into target buffer.
 */
Timestamp.prototype.copy = function (targetBuffer, targetOffset) {
  targetOffset = targetOffset || 0;
  for (var i=0; i<8; i++)
    targetBuffer[targetOffset+i] = this.buffer[this.offset+(7-i)];
};

/**
 * Compares this object with other object.  Performs a bytewise comparison of
 * the underlying buffers.
 * @param {Int64} other  Other Int64 derived object with which to compare
 * @return {Number} Number less than 0, equal to 0, or greater than 0, depending
 * of whether this object is less than, equal to, or greater than other.
 */
Timestamp.prototype.compare = function (other) {
  if (!other || !(other instanceof Int64))
    throw new TypeError('Invalid comparison object');
  var thisSlice = (this.offset === 0) ? this.buffer : this.buffer.slice(this.offset, this.offset+8);
  var otherSlice = (other.offset === 0) ? other.buffer : other.buffer.slice(other.offset, other.offset+8);
  return thisSlice.buffer.compare(otherSlice.buffer);
};

Timestamp.TIMESTAMP_MIN = new Timestamp(0, 2147483648);
Timestamp.TIMESTAMP_MAX = new Timestamp(4294967295, 2147483647);
Timestamp.TIMESTAMP_NULL = new Timestamp(1, 2147483648);
Timestamp.TIMESTAMP_AUTO = new Timestamp(2, 2147483648);
Timestamp.AUTO_ASSIGN = Timestamp.TIMESTAMP_AUTO;
