/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.hypertable.thriftgen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Specifies options for a shared periodic mutator
 * 
 * <dl>
 *   <dt>appname</dt>
 *   <dd>String key used to share/retrieve mutator, eg: "my_ht_app"</dd>
 * 
 *   <dt>flush_interval</dt>
 *   <dd>Time interval between flushes</dd>
 * 
 *   <dt>flags</dt>
 *   <dd>Mutator flags</dt>
 * </dl>
 */
public class MutateSpec implements TBase, java.io.Serializable, Cloneable, Comparable<MutateSpec> {
  private static final TStruct STRUCT_DESC = new TStruct("MutateSpec");
  private static final TField APPNAME_FIELD_DESC = new TField("appname", TType.STRING, (short)1);
  private static final TField FLUSH_INTERVAL_FIELD_DESC = new TField("flush_interval", TType.I32, (short)2);
  private static final TField FLAGS_FIELD_DESC = new TField("flags", TType.I32, (short)3);

  public String appname;
  public int flush_interval;
  public int flags;
  public static final int APPNAME = 1;
  public static final int FLUSH_INTERVAL = 2;
  public static final int FLAGS = 3;

  // isset id assignments
  private static final int __FLUSH_INTERVAL_ISSET_ID = 0;
  private static final int __FLAGS_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(APPNAME, new FieldMetaData("appname", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.STRING)));
    put(FLUSH_INTERVAL, new FieldMetaData("flush_interval", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I32)));
    put(FLAGS, new FieldMetaData("flags", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(MutateSpec.class, metaDataMap);
  }

  public static final Map<String, Integer> fieldNameMap = Collections.unmodifiableMap(new HashMap<String, Integer>() {{
    put("appname", new Integer(APPNAME));
    put("flush_interval", new Integer(FLUSH_INTERVAL));
    put("flags", new Integer(FLAGS));
  }});

  public MutateSpec() {
    this.appname = "";

    this.flush_interval = 1000;

    this.flags = 2;

  }

  public MutateSpec(
    String appname,
    int flush_interval,
    int flags)
  {
    this();
    this.appname = appname;
    this.flush_interval = flush_interval;
    setFlush_intervalIsSet(true);
    this.flags = flags;
    setFlagsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MutateSpec(MutateSpec other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAppname()) {
      this.appname = other.appname;
    }
    this.flush_interval = other.flush_interval;
    this.flags = other.flags;
  }

  public MutateSpec deepCopy() {
    return new MutateSpec(this);
  }

  @Deprecated
  public MutateSpec clone() {
    return new MutateSpec(this);
  }

  public String getAppname() {
    return this.appname;
  }

  public MutateSpec setAppname(String appname) {
    this.appname = appname;
    return this;
  }

  public void unsetAppname() {
    this.appname = null;
  }

  // Returns true if field appname is set (has been asigned a value) and false otherwise
  public boolean isSetAppname() {
    return this.appname != null;
  }

  public void setAppnameIsSet(boolean value) {
    if (!value) {
      this.appname = null;
    }
  }

  public int getFlush_interval() {
    return this.flush_interval;
  }

  public MutateSpec setFlush_interval(int flush_interval) {
    this.flush_interval = flush_interval;
    setFlush_intervalIsSet(true);
    return this;
  }

  public void unsetFlush_interval() {
    __isset_bit_vector.clear(__FLUSH_INTERVAL_ISSET_ID);
  }

  // Returns true if field flush_interval is set (has been asigned a value) and false otherwise
  public boolean isSetFlush_interval() {
    return __isset_bit_vector.get(__FLUSH_INTERVAL_ISSET_ID);
  }

  public void setFlush_intervalIsSet(boolean value) {
    __isset_bit_vector.set(__FLUSH_INTERVAL_ISSET_ID, value);
  }

  public int getFlags() {
    return this.flags;
  }

  public MutateSpec setFlags(int flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bit_vector.clear(__FLAGS_ISSET_ID);
  }

  // Returns true if field flags is set (has been asigned a value) and false otherwise
  public boolean isSetFlags() {
    return __isset_bit_vector.get(__FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bit_vector.set(__FLAGS_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case APPNAME:
      if (value == null) {
        unsetAppname();
      } else {
        setAppname((String)value);
      }
      break;

    case FLUSH_INTERVAL:
      if (value == null) {
        unsetFlush_interval();
      } else {
        setFlush_interval((Integer)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case APPNAME:
      return getAppname();

    case FLUSH_INTERVAL:
      return new Integer(getFlush_interval());

    case FLAGS:
      return new Integer(getFlags());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case APPNAME:
      return isSetAppname();
    case FLUSH_INTERVAL:
      return isSetFlush_interval();
    case FLAGS:
      return isSetFlags();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MutateSpec)
      return this.equals((MutateSpec)that);
    return false;
  }

  public boolean equals(MutateSpec that) {
    if (that == null)
      return false;

    boolean this_present_appname = true && this.isSetAppname();
    boolean that_present_appname = true && that.isSetAppname();
    if (this_present_appname || that_present_appname) {
      if (!(this_present_appname && that_present_appname))
        return false;
      if (!this.appname.equals(that.appname))
        return false;
    }

    boolean this_present_flush_interval = true;
    boolean that_present_flush_interval = true;
    if (this_present_flush_interval || that_present_flush_interval) {
      if (!(this_present_flush_interval && that_present_flush_interval))
        return false;
      if (this.flush_interval != that.flush_interval)
        return false;
    }

    boolean this_present_flags = true;
    boolean that_present_flags = true;
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MutateSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MutateSpec typedOther = (MutateSpec)other;

    lastComparison = Boolean.valueOf(isSetAppname()).compareTo(isSetAppname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(appname, typedOther.appname);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFlush_interval()).compareTo(isSetFlush_interval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(flush_interval, typedOther.flush_interval);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(flags, typedOther.flags);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case APPNAME:
          if (field.type == TType.STRING) {
            this.appname = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FLUSH_INTERVAL:
          if (field.type == TType.I32) {
            this.flush_interval = iprot.readI32();
            setFlush_intervalIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FLAGS:
          if (field.type == TType.I32) {
            this.flags = iprot.readI32();
            setFlagsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetFlush_interval()) {
      throw new TProtocolException("Required field 'flush_interval' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetFlags()) {
      throw new TProtocolException("Required field 'flags' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.appname != null) {
      oprot.writeFieldBegin(APPNAME_FIELD_DESC);
      oprot.writeString(this.appname);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FLUSH_INTERVAL_FIELD_DESC);
    oprot.writeI32(this.flush_interval);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FLAGS_FIELD_DESC);
    oprot.writeI32(this.flags);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MutateSpec(");
    boolean first = true;

    sb.append("appname:");
    if (this.appname == null) {
      sb.append("null");
    } else {
      sb.append(this.appname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flush_interval:");
    sb.append(this.flush_interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    sb.append(this.flags);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (appname == null) {
      throw new TProtocolException("Required field 'appname' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'flush_interval' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'flags' because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
  }

}

