/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.hypertable.thriftgen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

/**
 * Result type of HQL queries
 * 
 * <dl>
 *   <dt>results</dt>
 *   <dd>String results from metadata queries</dd>
 * 
 *   <dt>cells</dt>
 *   <dd>Resulting table cells of for buffered queries</dd>
 * 
 *   <dt>scanner</dt>
 *   <dd>Resulting scanner ID for unbuffered queries</dd>
 * 
 *   <dt>mutator</dt>
 *   <dd>Resulting mutator ID for unflushed modifying queries</dd>
 * </dl>
 */
public class HqlResult implements TBase, java.io.Serializable, Cloneable {
  public List<String> results;
  public static final int RESULTS = 1;
  public List<org.hypertable.thriftgen.Cell> cells;
  public static final int CELLS = 2;
  public long scanner;
  public static final int SCANNER = 3;
  public long mutator;
  public static final int MUTATOR = 4;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean results = false;
    public boolean cells = false;
    public boolean scanner = false;
    public boolean mutator = false;
  }

  public HqlResult() {
  }

  public HqlResult(
    List<String> results,
    List<org.hypertable.thriftgen.Cell> cells,
    long scanner,
    long mutator)
  {
    this();
    this.results = results;
    this.__isset.results = (results != null);
    this.cells = cells;
    this.__isset.cells = (cells != null);
    this.scanner = scanner;
    this.__isset.scanner = true;
    this.mutator = mutator;
    this.__isset.mutator = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HqlResult(HqlResult other) {
    __isset.results = other.__isset.results;
    if (other.results != null) {
      List<String> __this__results = new ArrayList<String>();
      for (String other_element : other.results) {
        __this__results.add(other_element);
      }
      this.results = __this__results;
    }
    __isset.cells = other.__isset.cells;
    if (other.cells != null) {
      List<org.hypertable.thriftgen.Cell> __this__cells = new ArrayList<org.hypertable.thriftgen.Cell>();
      for (org.hypertable.thriftgen.Cell other_element : other.cells) {
        __this__cells.add(new org.hypertable.thriftgen.Cell(other_element));
      }
      this.cells = __this__cells;
    }
    __isset.scanner = other.__isset.scanner;
    this.scanner = other.scanner;
    __isset.mutator = other.__isset.mutator;
    this.mutator = other.mutator;
  }

  public HqlResult clone() {
    return new HqlResult(this);
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HqlResult)
      return this.equals((HqlResult)that);
    return false;
  }

  public boolean equals(HqlResult that) {
    if (that == null)
      return false;

    boolean this_present_results = true && (this.__isset.results) && (this.results != null);
    boolean that_present_results = true && (that.__isset.results) && (that.results != null);
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    boolean this_present_cells = true && (this.__isset.cells) && (this.cells != null);
    boolean that_present_cells = true && (that.__isset.cells) && (that.cells != null);
    if (this_present_cells || that_present_cells) {
      if (!(this_present_cells && that_present_cells))
        return false;
      if (!this.cells.equals(that.cells))
        return false;
    }

    boolean this_present_scanner = true && (this.__isset.scanner);
    boolean that_present_scanner = true && (that.__isset.scanner);
    if (this_present_scanner || that_present_scanner) {
      if (!(this_present_scanner && that_present_scanner))
        return false;
      if (this.scanner != that.scanner)
        return false;
    }

    boolean this_present_mutator = true && (this.__isset.mutator);
    boolean that_present_mutator = true && (that.__isset.mutator);
    if (this_present_mutator || that_present_mutator) {
      if (!(this_present_mutator && that_present_mutator))
        return false;
      if (this.mutator != that.mutator)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case RESULTS:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.results = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2 = null;
                _elem2 = iprot.readString();
                this.results.add(_elem2);
              }
              iprot.readListEnd();
            }
            this.__isset.results = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CELLS:
          if (field.type == TType.LIST) {
            {
              TList _list3 = iprot.readListBegin();
              this.cells = new ArrayList<org.hypertable.thriftgen.Cell>(_list3.size);
              for (int _i4 = 0; _i4 < _list3.size; ++_i4)
              {
                org.hypertable.thriftgen.Cell _elem5 = new org.hypertable.thriftgen.Cell();
                _elem5 = new org.hypertable.thriftgen.Cell();
                _elem5.read(iprot);
                this.cells.add(_elem5);
              }
              iprot.readListEnd();
            }
            this.__isset.cells = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCANNER:
          if (field.type == TType.I64) {
            this.scanner = iprot.readI64();
            this.__isset.scanner = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MUTATOR:
          if (field.type == TType.I64) {
            this.mutator = iprot.readI64();
            this.__isset.mutator = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields
  }

  public void write(TProtocol oprot) throws TException {


    TStruct struct = new TStruct("HqlResult");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.results != null) {
      field.name = "results";
      field.type = TType.LIST;
      field.id = RESULTS;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.results.size()));
        for (String _iter6 : this.results)        {
          oprot.writeString(_iter6);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.cells != null) {
      field.name = "cells";
      field.type = TType.LIST;
      field.id = CELLS;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.cells.size()));
        for (org.hypertable.thriftgen.Cell _iter7 : this.cells)        {
          _iter7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    field.name = "scanner";
    field.type = TType.I64;
    field.id = SCANNER;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.scanner);
    oprot.writeFieldEnd();
    field.name = "mutator";
    field.type = TType.I64;
    field.id = MUTATOR;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.mutator);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("HqlResult(");
    boolean first = true;

    if (__isset.results) {
      if (!first) sb.append(", ");
      sb.append("results:");
      sb.append(this.results);
      first = false;
    }
    if (__isset.cells) {
      if (!first) sb.append(", ");
      sb.append("cells:");
      sb.append(this.cells);
      first = false;
    }
    if (__isset.scanner) {
      if (!first) sb.append(", ");
      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
    }
    if (__isset.mutator) {
      if (!first) sb.append(", ");
      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

}

