/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.hypertable.thriftgen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class ClientService {

  /**
   * The client service mimics the C++ client API, with table, scanner and
   * mutator interface flattened.
   */
  public interface Iface {

    /**
     * Create a table
     * 
     * @param name - table name
     * 
     * @param schema - schema of the table (in xml)
     */
    public void create_table(String name, String schema) throws ClientException, TException;

    /**
     * Open a table scanner
     * 
     * @param name - table name
     * 
     * @param scan_spec - scan specification
     */
    public long open_scanner(String name, ScanSpec scan_spec) throws ClientException, TException;

    /**
     * Close a table scanner
     * 
     * @param scanner - scanner id to close
     */
    public void close_scanner(long scanner) throws ClientException, TException;

    /**
     * Iterate over cells of a scanner
     * 
     * @param scanner - scanner id
     */
    public List<Cell> next_cells(long scanner) throws ClientException, TException;

    /**
     * Get a row (convenience method for random access a row)
     * 
     * @param name - table name
     * 
     * @param row - row key
     * 
     * @return a list of cells (with row_keys unset)
     */
    public List<Cell> get_row(String name, String row) throws ClientException, TException;

    /**
     * Get a cell (convenience method for random access a cell)
     * 
     * @param name - table name
     * 
     * @param row - row key
     * 
     * @param column - column name
     * 
     * @return value (byte sequence)
     */
    public byte[] get_cell(String name, String row, String column) throws ClientException, TException;

    /**
     * Get cells (convenience method for access small amount of cells)
     * 
     * @param name - table name
     * 
     * @param scan_spec - scan specification
     * 
     * @return a list of cells (a cell with no row key set is assumed to have
     *         the same row key as the previous cell)
     */
    public List<Cell> get_cells(String name, ScanSpec scan_spec) throws ClientException, TException;

    /**
     * Open a table mutator
     * 
     * @param name - table name
     * 
     * @return mutator id
     */
    public long open_mutator(String name) throws ClientException, TException;

    /**
     * Close a table mutator
     * 
     * @param mutator - mutator id to close
     */
    public void close_mutator(long mutator, boolean flush) throws ClientException, TException;

    /**
     * Set a cell in the table
     * 
     * @param mutator - mutator id
     * 
     * @param cell - the cell to set
     */
    public void set_cell(long mutator, Cell cell) throws ClientException, TException;

    /**
     * Put a list of cells into a table
     * 
     * @param mutator - mutator id
     * 
     * @param cells - a list of cells (a cell with no row key set is assumed
     *        to have the same row key as the previous cell)
     */
    public void set_cells(long mutator, List<Cell> cells) throws ClientException, TException;

    /**
     * Flush mutator buffers
     */
    public void flush_mutator(long mutator) throws ClientException, TException;

    /**
     * Get the id of a table
     * 
     * @param name - table name
     * 
     * @return table id
     */
    public int get_table_id(String name) throws ClientException, TException;

    /**
     * Get the schema of a table (that can be used with creat_table)
     * 
     * @param name - table name
     * 
     * @return schema string (in xml)
     */
    public String get_schema(String name) throws ClientException, TException;

    /**
     * Get a list of table names in the cluster
     * 
     * @return a list of table names
     */
    public List<String> get_tables() throws ClientException, TException;

    /**
     * Drop a table
     * 
     * @param name - table name
     * 
     * @param if_exists - if true, don't barf if the table doesn't exist
     */
    public void drop_table(String name, boolean if_exists) throws ClientException, TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void create_table(String name, String schema) throws ClientException, TException
    {
      send_create_table(name, schema);
      recv_create_table();
    }

    public void send_create_table(String name, String schema) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("create_table", TMessageType.CALL, seqid_));
      create_table_args args = new create_table_args();
      args.name = name;
      args.schema = schema;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_create_table() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      create_table_result result = new create_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.e) {
        throw result.e;
      }
      return;
    }

    public long open_scanner(String name, ScanSpec scan_spec) throws ClientException, TException
    {
      send_open_scanner(name, scan_spec);
      return recv_open_scanner();
    }

    public void send_open_scanner(String name, ScanSpec scan_spec) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("open_scanner", TMessageType.CALL, seqid_));
      open_scanner_args args = new open_scanner_args();
      args.name = name;
      args.scan_spec = scan_spec;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_open_scanner() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      open_scanner_result result = new open_scanner_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.e) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "open_scanner failed: unknown result");
    }

    public void close_scanner(long scanner) throws ClientException, TException
    {
      send_close_scanner(scanner);
      recv_close_scanner();
    }

    public void send_close_scanner(long scanner) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("close_scanner", TMessageType.CALL, seqid_));
      close_scanner_args args = new close_scanner_args();
      args.scanner = scanner;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_close_scanner() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      close_scanner_result result = new close_scanner_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.e) {
        throw result.e;
      }
      return;
    }

    public List<Cell> next_cells(long scanner) throws ClientException, TException
    {
      send_next_cells(scanner);
      return recv_next_cells();
    }

    public void send_next_cells(long scanner) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("next_cells", TMessageType.CALL, seqid_));
      next_cells_args args = new next_cells_args();
      args.scanner = scanner;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Cell> recv_next_cells() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      next_cells_result result = new next_cells_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.e) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "next_cells failed: unknown result");
    }

    public List<Cell> get_row(String name, String row) throws ClientException, TException
    {
      send_get_row(name, row);
      return recv_get_row();
    }

    public void send_get_row(String name, String row) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_row", TMessageType.CALL, seqid_));
      get_row_args args = new get_row_args();
      args.name = name;
      args.row = row;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Cell> recv_get_row() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_row_result result = new get_row_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.e) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_row failed: unknown result");
    }

    public byte[] get_cell(String name, String row, String column) throws ClientException, TException
    {
      send_get_cell(name, row, column);
      return recv_get_cell();
    }

    public void send_get_cell(String name, String row, String column) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_cell", TMessageType.CALL, seqid_));
      get_cell_args args = new get_cell_args();
      args.name = name;
      args.row = row;
      args.column = column;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_get_cell() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_cell_result result = new get_cell_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.e) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_cell failed: unknown result");
    }

    public List<Cell> get_cells(String name, ScanSpec scan_spec) throws ClientException, TException
    {
      send_get_cells(name, scan_spec);
      return recv_get_cells();
    }

    public void send_get_cells(String name, ScanSpec scan_spec) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_cells", TMessageType.CALL, seqid_));
      get_cells_args args = new get_cells_args();
      args.name = name;
      args.scan_spec = scan_spec;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<Cell> recv_get_cells() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_cells_result result = new get_cells_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.e) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_cells failed: unknown result");
    }

    public long open_mutator(String name) throws ClientException, TException
    {
      send_open_mutator(name);
      return recv_open_mutator();
    }

    public void send_open_mutator(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("open_mutator", TMessageType.CALL, seqid_));
      open_mutator_args args = new open_mutator_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_open_mutator() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      open_mutator_result result = new open_mutator_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.e) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "open_mutator failed: unknown result");
    }

    public void close_mutator(long mutator, boolean flush) throws ClientException, TException
    {
      send_close_mutator(mutator, flush);
      recv_close_mutator();
    }

    public void send_close_mutator(long mutator, boolean flush) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("close_mutator", TMessageType.CALL, seqid_));
      close_mutator_args args = new close_mutator_args();
      args.mutator = mutator;
      args.flush = flush;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_close_mutator() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      close_mutator_result result = new close_mutator_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.e) {
        throw result.e;
      }
      return;
    }

    public void set_cell(long mutator, Cell cell) throws ClientException, TException
    {
      send_set_cell(mutator, cell);
      recv_set_cell();
    }

    public void send_set_cell(long mutator, Cell cell) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("set_cell", TMessageType.CALL, seqid_));
      set_cell_args args = new set_cell_args();
      args.mutator = mutator;
      args.cell = cell;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_set_cell() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      set_cell_result result = new set_cell_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.e) {
        throw result.e;
      }
      return;
    }

    public void set_cells(long mutator, List<Cell> cells) throws ClientException, TException
    {
      send_set_cells(mutator, cells);
      recv_set_cells();
    }

    public void send_set_cells(long mutator, List<Cell> cells) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("set_cells", TMessageType.CALL, seqid_));
      set_cells_args args = new set_cells_args();
      args.mutator = mutator;
      args.cells = cells;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_set_cells() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      set_cells_result result = new set_cells_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.e) {
        throw result.e;
      }
      return;
    }

    public void flush_mutator(long mutator) throws ClientException, TException
    {
      send_flush_mutator(mutator);
      recv_flush_mutator();
    }

    public void send_flush_mutator(long mutator) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("flush_mutator", TMessageType.CALL, seqid_));
      flush_mutator_args args = new flush_mutator_args();
      args.mutator = mutator;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_flush_mutator() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      flush_mutator_result result = new flush_mutator_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.e) {
        throw result.e;
      }
      return;
    }

    public int get_table_id(String name) throws ClientException, TException
    {
      send_get_table_id(name);
      return recv_get_table_id();
    }

    public void send_get_table_id(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_table_id", TMessageType.CALL, seqid_));
      get_table_id_args args = new get_table_id_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_get_table_id() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_table_id_result result = new get_table_id_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.e) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_table_id failed: unknown result");
    }

    public String get_schema(String name) throws ClientException, TException
    {
      send_get_schema(name);
      return recv_get_schema();
    }

    public void send_get_schema(String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_schema", TMessageType.CALL, seqid_));
      get_schema_args args = new get_schema_args();
      args.name = name;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_get_schema() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_schema_result result = new get_schema_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.e) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_schema failed: unknown result");
    }

    public List<String> get_tables() throws ClientException, TException
    {
      send_get_tables();
      return recv_get_tables();
    }

    public void send_get_tables() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_tables", TMessageType.CALL, seqid_));
      get_tables_args args = new get_tables_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_get_tables() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_tables_result result = new get_tables_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.e) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_tables failed: unknown result");
    }

    public void drop_table(String name, boolean if_exists) throws ClientException, TException
    {
      send_drop_table(name, if_exists);
      recv_drop_table();
    }

    public void send_drop_table(String name, boolean if_exists) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("drop_table", TMessageType.CALL, seqid_));
      drop_table_args args = new drop_table_args();
      args.name = name;
      args.if_exists = if_exists;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_drop_table() throws ClientException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      drop_table_result result = new drop_table_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.e) {
        throw result.e;
      }
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("create_table", new create_table());
      processMap_.put("open_scanner", new open_scanner());
      processMap_.put("close_scanner", new close_scanner());
      processMap_.put("next_cells", new next_cells());
      processMap_.put("get_row", new get_row());
      processMap_.put("get_cell", new get_cell());
      processMap_.put("get_cells", new get_cells());
      processMap_.put("open_mutator", new open_mutator());
      processMap_.put("close_mutator", new close_mutator());
      processMap_.put("set_cell", new set_cell());
      processMap_.put("set_cells", new set_cells());
      processMap_.put("flush_mutator", new flush_mutator());
      processMap_.put("get_table_id", new get_table_id());
      processMap_.put("get_schema", new get_schema());
      processMap_.put("get_tables", new get_tables());
      processMap_.put("drop_table", new drop_table());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class create_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        create_table_args args = new create_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        create_table_result result = new create_table_result();
        try {
          iface_.create_table(args.name, args.schema);
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("create_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class open_scanner implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        open_scanner_args args = new open_scanner_args();
        args.read(iprot);
        iprot.readMessageEnd();
        open_scanner_result result = new open_scanner_result();
        try {
          result.success = iface_.open_scanner(args.name, args.scan_spec);
          result.__isset.success = true;
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("open_scanner", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class close_scanner implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        close_scanner_args args = new close_scanner_args();
        args.read(iprot);
        iprot.readMessageEnd();
        close_scanner_result result = new close_scanner_result();
        try {
          iface_.close_scanner(args.scanner);
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("close_scanner", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class next_cells implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        next_cells_args args = new next_cells_args();
        args.read(iprot);
        iprot.readMessageEnd();
        next_cells_result result = new next_cells_result();
        try {
          result.success = iface_.next_cells(args.scanner);
          result.__isset.success = true;
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("next_cells", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_row implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_row_args args = new get_row_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_row_result result = new get_row_result();
        try {
          result.success = iface_.get_row(args.name, args.row);
          result.__isset.success = true;
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("get_row", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_cell implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_cell_args args = new get_cell_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_cell_result result = new get_cell_result();
        try {
          result.success = iface_.get_cell(args.name, args.row, args.column);
          result.__isset.success = true;
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("get_cell", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_cells implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_cells_args args = new get_cells_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_cells_result result = new get_cells_result();
        try {
          result.success = iface_.get_cells(args.name, args.scan_spec);
          result.__isset.success = true;
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("get_cells", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class open_mutator implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        open_mutator_args args = new open_mutator_args();
        args.read(iprot);
        iprot.readMessageEnd();
        open_mutator_result result = new open_mutator_result();
        try {
          result.success = iface_.open_mutator(args.name);
          result.__isset.success = true;
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("open_mutator", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class close_mutator implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        close_mutator_args args = new close_mutator_args();
        args.read(iprot);
        iprot.readMessageEnd();
        close_mutator_result result = new close_mutator_result();
        try {
          iface_.close_mutator(args.mutator, args.flush);
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("close_mutator", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class set_cell implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        set_cell_args args = new set_cell_args();
        args.read(iprot);
        iprot.readMessageEnd();
        set_cell_result result = new set_cell_result();
        try {
          iface_.set_cell(args.mutator, args.cell);
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("set_cell", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class set_cells implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        set_cells_args args = new set_cells_args();
        args.read(iprot);
        iprot.readMessageEnd();
        set_cells_result result = new set_cells_result();
        try {
          iface_.set_cells(args.mutator, args.cells);
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("set_cells", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class flush_mutator implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        flush_mutator_args args = new flush_mutator_args();
        args.read(iprot);
        iprot.readMessageEnd();
        flush_mutator_result result = new flush_mutator_result();
        try {
          iface_.flush_mutator(args.mutator);
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("flush_mutator", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_table_id implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_table_id_args args = new get_table_id_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_table_id_result result = new get_table_id_result();
        try {
          result.success = iface_.get_table_id(args.name);
          result.__isset.success = true;
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("get_table_id", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_schema implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_schema_args args = new get_schema_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_schema_result result = new get_schema_result();
        try {
          result.success = iface_.get_schema(args.name);
          result.__isset.success = true;
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("get_schema", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_tables implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_tables_args args = new get_tables_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_tables_result result = new get_tables_result();
        try {
          result.success = iface_.get_tables();
          result.__isset.success = true;
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("get_tables", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class drop_table implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        drop_table_args args = new drop_table_args();
        args.read(iprot);
        iprot.readMessageEnd();
        drop_table_result result = new drop_table_result();
        try {
          iface_.drop_table(args.name, args.if_exists);
        } catch (ClientException e) {
          result.e = e;
          result.__isset.e = true;
        }
        oprot.writeMessageBegin(new TMessage("drop_table", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class create_table_args implements TBase, java.io.Serializable, Cloneable   {
    public String name;
    public static final int NAME = 1;
    public String schema;
    public static final int SCHEMA = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean name = false;
      public boolean schema = false;
    }

    public create_table_args() {
    }

    public create_table_args(
      String name,
      String schema)
    {
      this();
      this.name = name;
      this.__isset.name = (name != null);
      this.schema = schema;
      this.__isset.schema = (schema != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_args(create_table_args other) {
      __isset.name = other.__isset.name;
      if (other.name != null) {
        this.name = other.name;
      }
      __isset.schema = other.__isset.schema;
      if (other.schema != null) {
        this.schema = other.schema;
      }
    }

    public create_table_args clone() {
      return new create_table_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_args)
        return this.equals((create_table_args)that);
      return false;
    }

    public boolean equals(create_table_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_schema = true && (this.schema != null);
      boolean that_present_schema = true && (that.schema != null);
      if (this_present_schema || that_present_schema) {
        if (!(this_present_schema && that_present_schema))
          return false;
        if (!this.schema.equals(that.schema))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SCHEMA:
            if (field.type == TType.STRING) {
              this.schema = iprot.readString();
              this.__isset.schema = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("create_table_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = NAME;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.schema != null) {
        field.name = "schema";
        field.type = TType.STRING;
        field.id = SCHEMA;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.schema);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("create_table_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      if (!first) sb.append(", ");
      sb.append("schema:");
      sb.append(this.schema);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class create_table_result implements TBase, java.io.Serializable, Cloneable   {
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean e = false;
    }

    public create_table_result() {
    }

    public create_table_result(
      ClientException e)
    {
      this();
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_result(create_table_result other) {
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public create_table_result clone() {
      return new create_table_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_result)
        return this.equals((create_table_result)that);
      return false;
    }

    public boolean equals(create_table_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("create_table_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("create_table_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class open_scanner_args implements TBase, java.io.Serializable, Cloneable   {
    public String name;
    public static final int NAME = 1;
    public ScanSpec scan_spec;
    public static final int SCAN_SPEC = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean name = false;
      public boolean scan_spec = false;
    }

    public open_scanner_args() {
    }

    public open_scanner_args(
      String name,
      ScanSpec scan_spec)
    {
      this();
      this.name = name;
      this.__isset.name = (name != null);
      this.scan_spec = scan_spec;
      this.__isset.scan_spec = (scan_spec != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_scanner_args(open_scanner_args other) {
      __isset.name = other.__isset.name;
      if (other.name != null) {
        this.name = other.name;
      }
      __isset.scan_spec = other.__isset.scan_spec;
      if (other.scan_spec != null) {
        this.scan_spec = new ScanSpec(other.scan_spec);
      }
    }

    public open_scanner_args clone() {
      return new open_scanner_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_scanner_args)
        return this.equals((open_scanner_args)that);
      return false;
    }

    public boolean equals(open_scanner_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_scan_spec = true && (this.scan_spec != null);
      boolean that_present_scan_spec = true && (that.scan_spec != null);
      if (this_present_scan_spec || that_present_scan_spec) {
        if (!(this_present_scan_spec && that_present_scan_spec))
          return false;
        if (!this.scan_spec.equals(that.scan_spec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SCAN_SPEC:
            if (field.type == TType.STRUCT) {
              this.scan_spec = new ScanSpec();
              this.scan_spec.read(iprot);
              this.__isset.scan_spec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("open_scanner_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = NAME;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.scan_spec != null) {
        field.name = "scan_spec";
        field.type = TType.STRUCT;
        field.id = SCAN_SPEC;
        oprot.writeFieldBegin(field);
        this.scan_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("open_scanner_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan_spec:");
      sb.append(this.scan_spec);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class open_scanner_result implements TBase, java.io.Serializable, Cloneable   {
    public long success;
    public static final int SUCCESS = 0;
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean e = false;
    }

    public open_scanner_result() {
    }

    public open_scanner_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_scanner_result(open_scanner_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public open_scanner_result clone() {
      return new open_scanner_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_scanner_result)
        return this.equals((open_scanner_result)that);
      return false;
    }

    public boolean equals(open_scanner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("open_scanner_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I64;
        field.id = SUCCESS;
        oprot.writeFieldBegin(field);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("open_scanner_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class close_scanner_args implements TBase, java.io.Serializable, Cloneable   {
    public long scanner;
    public static final int SCANNER = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanner = false;
    }

    public close_scanner_args() {
    }

    public close_scanner_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      this.__isset.scanner = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_scanner_args(close_scanner_args other) {
      __isset.scanner = other.__isset.scanner;
      this.scanner = other.scanner;
    }

    public close_scanner_args clone() {
      return new close_scanner_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_scanner_args)
        return this.equals((close_scanner_args)that);
      return false;
    }

    public boolean equals(close_scanner_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SCANNER:
            if (field.type == TType.I64) {
              this.scanner = iprot.readI64();
              this.__isset.scanner = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("close_scanner_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanner";
      field.type = TType.I64;
      field.id = SCANNER;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("close_scanner_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class close_scanner_result implements TBase, java.io.Serializable, Cloneable   {
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean e = false;
    }

    public close_scanner_result() {
    }

    public close_scanner_result(
      ClientException e)
    {
      this();
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_scanner_result(close_scanner_result other) {
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public close_scanner_result clone() {
      return new close_scanner_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_scanner_result)
        return this.equals((close_scanner_result)that);
      return false;
    }

    public boolean equals(close_scanner_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("close_scanner_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("close_scanner_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class next_cells_args implements TBase, java.io.Serializable, Cloneable   {
    public long scanner;
    public static final int SCANNER = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean scanner = false;
    }

    public next_cells_args() {
    }

    public next_cells_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      this.__isset.scanner = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_cells_args(next_cells_args other) {
      __isset.scanner = other.__isset.scanner;
      this.scanner = other.scanner;
    }

    public next_cells_args clone() {
      return new next_cells_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_cells_args)
        return this.equals((next_cells_args)that);
      return false;
    }

    public boolean equals(next_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SCANNER:
            if (field.type == TType.I64) {
              this.scanner = iprot.readI64();
              this.__isset.scanner = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("next_cells_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "scanner";
      field.type = TType.I64;
      field.id = SCANNER;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("next_cells_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class next_cells_result implements TBase, java.io.Serializable, Cloneable   {
    public List<Cell> success;
    public static final int SUCCESS = 0;
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean e = false;
    }

    public next_cells_result() {
    }

    public next_cells_result(
      List<Cell> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.__isset.success = (success != null);
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_cells_result(next_cells_result other) {
      __isset.success = other.__isset.success;
      if (other.success != null) {
        List<Cell> __this__success = new ArrayList<Cell>();
        for (Cell other_element : other.success) {
          __this__success.add(new Cell(other_element));
        }
        this.success = __this__success;
      }
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public next_cells_result clone() {
      return new next_cells_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_cells_result)
        return this.equals((next_cells_result)that);
      return false;
    }

    public boolean equals(next_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list8 = iprot.readListBegin();
                this.success = new ArrayList<Cell>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  Cell _elem10 = new Cell();
                  _elem10 = new Cell();
                  _elem10.read(iprot);
                  this.success.add(_elem10);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("next_cells_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = SUCCESS;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
            for (Cell _iter11 : this.success)            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("next_cells_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_row_args implements TBase, java.io.Serializable, Cloneable   {
    public String name;
    public static final int NAME = 1;
    public String row;
    public static final int ROW = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean name = false;
      public boolean row = false;
    }

    public get_row_args() {
    }

    public get_row_args(
      String name,
      String row)
    {
      this();
      this.name = name;
      this.__isset.name = (name != null);
      this.row = row;
      this.__isset.row = (row != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_row_args(get_row_args other) {
      __isset.name = other.__isset.name;
      if (other.name != null) {
        this.name = other.name;
      }
      __isset.row = other.__isset.row;
      if (other.row != null) {
        this.row = other.row;
      }
    }

    public get_row_args clone() {
      return new get_row_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_row_args)
        return this.equals((get_row_args)that);
      return false;
    }

    public boolean equals(get_row_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_row = true && (this.row != null);
      boolean that_present_row = true && (that.row != null);
      if (this_present_row || that_present_row) {
        if (!(this_present_row && that_present_row))
          return false;
        if (!this.row.equals(that.row))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROW:
            if (field.type == TType.STRING) {
              this.row = iprot.readString();
              this.__isset.row = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("get_row_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = NAME;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.row != null) {
        field.name = "row";
        field.type = TType.STRING;
        field.id = ROW;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.row);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_row_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      if (!first) sb.append(", ");
      sb.append("row:");
      sb.append(this.row);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_row_result implements TBase, java.io.Serializable, Cloneable   {
    public List<Cell> success;
    public static final int SUCCESS = 0;
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean e = false;
    }

    public get_row_result() {
    }

    public get_row_result(
      List<Cell> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.__isset.success = (success != null);
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_row_result(get_row_result other) {
      __isset.success = other.__isset.success;
      if (other.success != null) {
        List<Cell> __this__success = new ArrayList<Cell>();
        for (Cell other_element : other.success) {
          __this__success.add(new Cell(other_element));
        }
        this.success = __this__success;
      }
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public get_row_result clone() {
      return new get_row_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_row_result)
        return this.equals((get_row_result)that);
      return false;
    }

    public boolean equals(get_row_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list12 = iprot.readListBegin();
                this.success = new ArrayList<Cell>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  Cell _elem14 = new Cell();
                  _elem14 = new Cell();
                  _elem14.read(iprot);
                  this.success.add(_elem14);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_row_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = SUCCESS;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
            for (Cell _iter15 : this.success)            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_row_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_cell_args implements TBase, java.io.Serializable, Cloneable   {
    public String name;
    public static final int NAME = 1;
    public String row;
    public static final int ROW = 2;
    public String column;
    public static final int COLUMN = 3;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean name = false;
      public boolean row = false;
      public boolean column = false;
    }

    public get_cell_args() {
    }

    public get_cell_args(
      String name,
      String row,
      String column)
    {
      this();
      this.name = name;
      this.__isset.name = (name != null);
      this.row = row;
      this.__isset.row = (row != null);
      this.column = column;
      this.__isset.column = (column != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cell_args(get_cell_args other) {
      __isset.name = other.__isset.name;
      if (other.name != null) {
        this.name = other.name;
      }
      __isset.row = other.__isset.row;
      if (other.row != null) {
        this.row = other.row;
      }
      __isset.column = other.__isset.column;
      if (other.column != null) {
        this.column = other.column;
      }
    }

    public get_cell_args clone() {
      return new get_cell_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cell_args)
        return this.equals((get_cell_args)that);
      return false;
    }

    public boolean equals(get_cell_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_row = true && (this.row != null);
      boolean that_present_row = true && (that.row != null);
      if (this_present_row || that_present_row) {
        if (!(this_present_row && that_present_row))
          return false;
        if (!this.row.equals(that.row))
          return false;
      }

      boolean this_present_column = true && (this.column != null);
      boolean that_present_column = true && (that.column != null);
      if (this_present_column || that_present_column) {
        if (!(this_present_column && that_present_column))
          return false;
        if (!this.column.equals(that.column))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROW:
            if (field.type == TType.STRING) {
              this.row = iprot.readString();
              this.__isset.row = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case COLUMN:
            if (field.type == TType.STRING) {
              this.column = iprot.readString();
              this.__isset.column = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("get_cell_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = NAME;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.row != null) {
        field.name = "row";
        field.type = TType.STRING;
        field.id = ROW;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.row);
        oprot.writeFieldEnd();
      }
      if (this.column != null) {
        field.name = "column";
        field.type = TType.STRING;
        field.id = COLUMN;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.column);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_cell_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      if (!first) sb.append(", ");
      sb.append("row:");
      sb.append(this.row);
      first = false;
      if (!first) sb.append(", ");
      sb.append("column:");
      sb.append(this.column);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_cell_result implements TBase, java.io.Serializable, Cloneable   {
    public byte[] success;
    public static final int SUCCESS = 0;
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean e = false;
    }

    public get_cell_result() {
    }

    public get_cell_result(
      byte[] success,
      ClientException e)
    {
      this();
      this.success = success;
      this.__isset.success = (success != null);
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cell_result(get_cell_result other) {
      __isset.success = other.__isset.success;
      if (other.success != null) {
        this.success = other.success;
      }
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public get_cell_result clone() {
      return new get_cell_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cell_result)
        return this.equals((get_cell_result)that);
      return false;
    }

    public boolean equals(get_cell_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!java.util.Arrays.equals(this.success, that.success))
          return false;
      }

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readBinary();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_cell_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRING;
          field.id = SUCCESS;
          oprot.writeFieldBegin(field);
          oprot.writeBinary(this.success);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_cell_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_cells_args implements TBase, java.io.Serializable, Cloneable   {
    public String name;
    public static final int NAME = 1;
    public ScanSpec scan_spec;
    public static final int SCAN_SPEC = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean name = false;
      public boolean scan_spec = false;
    }

    public get_cells_args() {
    }

    public get_cells_args(
      String name,
      ScanSpec scan_spec)
    {
      this();
      this.name = name;
      this.__isset.name = (name != null);
      this.scan_spec = scan_spec;
      this.__isset.scan_spec = (scan_spec != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cells_args(get_cells_args other) {
      __isset.name = other.__isset.name;
      if (other.name != null) {
        this.name = other.name;
      }
      __isset.scan_spec = other.__isset.scan_spec;
      if (other.scan_spec != null) {
        this.scan_spec = new ScanSpec(other.scan_spec);
      }
    }

    public get_cells_args clone() {
      return new get_cells_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cells_args)
        return this.equals((get_cells_args)that);
      return false;
    }

    public boolean equals(get_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_scan_spec = true && (this.scan_spec != null);
      boolean that_present_scan_spec = true && (that.scan_spec != null);
      if (this_present_scan_spec || that_present_scan_spec) {
        if (!(this_present_scan_spec && that_present_scan_spec))
          return false;
        if (!this.scan_spec.equals(that.scan_spec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SCAN_SPEC:
            if (field.type == TType.STRUCT) {
              this.scan_spec = new ScanSpec();
              this.scan_spec.read(iprot);
              this.__isset.scan_spec = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("get_cells_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = NAME;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.scan_spec != null) {
        field.name = "scan_spec";
        field.type = TType.STRUCT;
        field.id = SCAN_SPEC;
        oprot.writeFieldBegin(field);
        this.scan_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_cells_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan_spec:");
      sb.append(this.scan_spec);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_cells_result implements TBase, java.io.Serializable, Cloneable   {
    public List<Cell> success;
    public static final int SUCCESS = 0;
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean e = false;
    }

    public get_cells_result() {
    }

    public get_cells_result(
      List<Cell> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.__isset.success = (success != null);
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cells_result(get_cells_result other) {
      __isset.success = other.__isset.success;
      if (other.success != null) {
        List<Cell> __this__success = new ArrayList<Cell>();
        for (Cell other_element : other.success) {
          __this__success.add(new Cell(other_element));
        }
        this.success = __this__success;
      }
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public get_cells_result clone() {
      return new get_cells_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cells_result)
        return this.equals((get_cells_result)that);
      return false;
    }

    public boolean equals(get_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list16 = iprot.readListBegin();
                this.success = new ArrayList<Cell>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  Cell _elem18 = new Cell();
                  _elem18 = new Cell();
                  _elem18.read(iprot);
                  this.success.add(_elem18);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_cells_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = SUCCESS;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
            for (Cell _iter19 : this.success)            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_cells_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class open_mutator_args implements TBase, java.io.Serializable, Cloneable   {
    public String name;
    public static final int NAME = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean name = false;
    }

    public open_mutator_args() {
    }

    public open_mutator_args(
      String name)
    {
      this();
      this.name = name;
      this.__isset.name = (name != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_mutator_args(open_mutator_args other) {
      __isset.name = other.__isset.name;
      if (other.name != null) {
        this.name = other.name;
      }
    }

    public open_mutator_args clone() {
      return new open_mutator_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_mutator_args)
        return this.equals((open_mutator_args)that);
      return false;
    }

    public boolean equals(open_mutator_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("open_mutator_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = NAME;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("open_mutator_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class open_mutator_result implements TBase, java.io.Serializable, Cloneable   {
    public long success;
    public static final int SUCCESS = 0;
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean e = false;
    }

    public open_mutator_result() {
    }

    public open_mutator_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_mutator_result(open_mutator_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public open_mutator_result clone() {
      return new open_mutator_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_mutator_result)
        return this.equals((open_mutator_result)that);
      return false;
    }

    public boolean equals(open_mutator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("open_mutator_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I64;
        field.id = SUCCESS;
        oprot.writeFieldBegin(field);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("open_mutator_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class close_mutator_args implements TBase, java.io.Serializable, Cloneable   {
    public long mutator;
    public static final int MUTATOR = 1;
    public boolean flush;
    public static final int FLUSH = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean mutator = false;
      public boolean flush = false;
    }

    public close_mutator_args() {
      this.flush = true;

    }

    public close_mutator_args(
      long mutator,
      boolean flush)
    {
      this();
      this.mutator = mutator;
      this.__isset.mutator = true;
      this.flush = flush;
      this.__isset.flush = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_mutator_args(close_mutator_args other) {
      __isset.mutator = other.__isset.mutator;
      this.mutator = other.mutator;
      __isset.flush = other.__isset.flush;
      this.flush = other.flush;
    }

    public close_mutator_args clone() {
      return new close_mutator_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_mutator_args)
        return this.equals((close_mutator_args)that);
      return false;
    }

    public boolean equals(close_mutator_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_flush = true;
      boolean that_present_flush = true;
      if (this_present_flush || that_present_flush) {
        if (!(this_present_flush && that_present_flush))
          return false;
        if (this.flush != that.flush)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MUTATOR:
            if (field.type == TType.I64) {
              this.mutator = iprot.readI64();
              this.__isset.mutator = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FLUSH:
            if (field.type == TType.BOOL) {
              this.flush = iprot.readBool();
              this.__isset.flush = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("close_mutator_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "mutator";
      field.type = TType.I64;
      field.id = MUTATOR;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      field.name = "flush";
      field.type = TType.BOOL;
      field.id = FLUSH;
      oprot.writeFieldBegin(field);
      oprot.writeBool(this.flush);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("close_mutator_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flush:");
      sb.append(this.flush);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class close_mutator_result implements TBase, java.io.Serializable, Cloneable   {
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean e = false;
    }

    public close_mutator_result() {
    }

    public close_mutator_result(
      ClientException e)
    {
      this();
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_mutator_result(close_mutator_result other) {
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public close_mutator_result clone() {
      return new close_mutator_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_mutator_result)
        return this.equals((close_mutator_result)that);
      return false;
    }

    public boolean equals(close_mutator_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("close_mutator_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("close_mutator_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class set_cell_args implements TBase, java.io.Serializable, Cloneable   {
    public long mutator;
    public static final int MUTATOR = 1;
    public Cell cell;
    public static final int CELL = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean mutator = false;
      public boolean cell = false;
    }

    public set_cell_args() {
    }

    public set_cell_args(
      long mutator,
      Cell cell)
    {
      this();
      this.mutator = mutator;
      this.__isset.mutator = true;
      this.cell = cell;
      this.__isset.cell = (cell != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_args(set_cell_args other) {
      __isset.mutator = other.__isset.mutator;
      this.mutator = other.mutator;
      __isset.cell = other.__isset.cell;
      if (other.cell != null) {
        this.cell = new Cell(other.cell);
      }
    }

    public set_cell_args clone() {
      return new set_cell_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_args)
        return this.equals((set_cell_args)that);
      return false;
    }

    public boolean equals(set_cell_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cell = true && (this.cell != null);
      boolean that_present_cell = true && (that.cell != null);
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MUTATOR:
            if (field.type == TType.I64) {
              this.mutator = iprot.readI64();
              this.__isset.mutator = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CELL:
            if (field.type == TType.STRUCT) {
              this.cell = new Cell();
              this.cell.read(iprot);
              this.__isset.cell = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("set_cell_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "mutator";
      field.type = TType.I64;
      field.id = MUTATOR;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cell != null) {
        field.name = "cell";
        field.type = TType.STRUCT;
        field.id = CELL;
        oprot.writeFieldBegin(field);
        this.cell.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      sb.append(this.cell);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class set_cell_result implements TBase, java.io.Serializable, Cloneable   {
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean e = false;
    }

    public set_cell_result() {
    }

    public set_cell_result(
      ClientException e)
    {
      this();
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_result(set_cell_result other) {
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cell_result clone() {
      return new set_cell_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_result)
        return this.equals((set_cell_result)that);
      return false;
    }

    public boolean equals(set_cell_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("set_cell_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class set_cells_args implements TBase, java.io.Serializable, Cloneable   {
    public long mutator;
    public static final int MUTATOR = 1;
    public List<Cell> cells;
    public static final int CELLS = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean mutator = false;
      public boolean cells = false;
    }

    public set_cells_args() {
    }

    public set_cells_args(
      long mutator,
      List<Cell> cells)
    {
      this();
      this.mutator = mutator;
      this.__isset.mutator = true;
      this.cells = cells;
      this.__isset.cells = (cells != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_args(set_cells_args other) {
      __isset.mutator = other.__isset.mutator;
      this.mutator = other.mutator;
      __isset.cells = other.__isset.cells;
      if (other.cells != null) {
        List<Cell> __this__cells = new ArrayList<Cell>();
        for (Cell other_element : other.cells) {
          __this__cells.add(new Cell(other_element));
        }
        this.cells = __this__cells;
      }
    }

    public set_cells_args clone() {
      return new set_cells_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_args)
        return this.equals((set_cells_args)that);
      return false;
    }

    public boolean equals(set_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && (this.cells != null);
      boolean that_present_cells = true && (that.cells != null);
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MUTATOR:
            if (field.type == TType.I64) {
              this.mutator = iprot.readI64();
              this.__isset.mutator = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CELLS:
            if (field.type == TType.LIST) {
              {
                TList _list20 = iprot.readListBegin();
                this.cells = new ArrayList<Cell>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  Cell _elem22 = new Cell();
                  _elem22 = new Cell();
                  _elem22.read(iprot);
                  this.cells.add(_elem22);
                }
                iprot.readListEnd();
              }
              this.__isset.cells = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("set_cells_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "mutator";
      field.type = TType.I64;
      field.id = MUTATOR;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        field.name = "cells";
        field.type = TType.LIST;
        field.id = CELLS;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.cells.size()));
          for (Cell _iter23 : this.cells)          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      sb.append(this.cells);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class set_cells_result implements TBase, java.io.Serializable, Cloneable   {
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean e = false;
    }

    public set_cells_result() {
    }

    public set_cells_result(
      ClientException e)
    {
      this();
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_result(set_cells_result other) {
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cells_result clone() {
      return new set_cells_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_result)
        return this.equals((set_cells_result)that);
      return false;
    }

    public boolean equals(set_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("set_cells_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class flush_mutator_args implements TBase, java.io.Serializable, Cloneable   {
    public long mutator;
    public static final int MUTATOR = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean mutator = false;
    }

    public flush_mutator_args() {
    }

    public flush_mutator_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      this.__isset.mutator = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_mutator_args(flush_mutator_args other) {
      __isset.mutator = other.__isset.mutator;
      this.mutator = other.mutator;
    }

    public flush_mutator_args clone() {
      return new flush_mutator_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_mutator_args)
        return this.equals((flush_mutator_args)that);
      return false;
    }

    public boolean equals(flush_mutator_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case MUTATOR:
            if (field.type == TType.I64) {
              this.mutator = iprot.readI64();
              this.__isset.mutator = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("flush_mutator_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      field.name = "mutator";
      field.type = TType.I64;
      field.id = MUTATOR;
      oprot.writeFieldBegin(field);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("flush_mutator_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class flush_mutator_result implements TBase, java.io.Serializable, Cloneable   {
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean e = false;
    }

    public flush_mutator_result() {
    }

    public flush_mutator_result(
      ClientException e)
    {
      this();
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_mutator_result(flush_mutator_result other) {
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public flush_mutator_result clone() {
      return new flush_mutator_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_mutator_result)
        return this.equals((flush_mutator_result)that);
      return false;
    }

    public boolean equals(flush_mutator_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("flush_mutator_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("flush_mutator_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_table_id_args implements TBase, java.io.Serializable, Cloneable   {
    public String name;
    public static final int NAME = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean name = false;
    }

    public get_table_id_args() {
    }

    public get_table_id_args(
      String name)
    {
      this();
      this.name = name;
      this.__isset.name = (name != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_id_args(get_table_id_args other) {
      __isset.name = other.__isset.name;
      if (other.name != null) {
        this.name = other.name;
      }
    }

    public get_table_id_args clone() {
      return new get_table_id_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_id_args)
        return this.equals((get_table_id_args)that);
      return false;
    }

    public boolean equals(get_table_id_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("get_table_id_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = NAME;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_id_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_table_id_result implements TBase, java.io.Serializable, Cloneable   {
    public int success;
    public static final int SUCCESS = 0;
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean e = false;
    }

    public get_table_id_result() {
    }

    public get_table_id_result(
      int success,
      ClientException e)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_id_result(get_table_id_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public get_table_id_result clone() {
      return new get_table_id_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_id_result)
        return this.equals((get_table_id_result)that);
      return false;
    }

    public boolean equals(get_table_id_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_table_id_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I32;
        field.id = SUCCESS;
        oprot.writeFieldBegin(field);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_id_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_schema_args implements TBase, java.io.Serializable, Cloneable   {
    public String name;
    public static final int NAME = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean name = false;
    }

    public get_schema_args() {
    }

    public get_schema_args(
      String name)
    {
      this();
      this.name = name;
      this.__isset.name = (name != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_args(get_schema_args other) {
      __isset.name = other.__isset.name;
      if (other.name != null) {
        this.name = other.name;
      }
    }

    public get_schema_args clone() {
      return new get_schema_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_args)
        return this.equals((get_schema_args)that);
      return false;
    }

    public boolean equals(get_schema_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("get_schema_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = NAME;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_schema_result implements TBase, java.io.Serializable, Cloneable   {
    public String success;
    public static final int SUCCESS = 0;
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean e = false;
    }

    public get_schema_result() {
    }

    public get_schema_result(
      String success,
      ClientException e)
    {
      this();
      this.success = success;
      this.__isset.success = (success != null);
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_result(get_schema_result other) {
      __isset.success = other.__isset.success;
      if (other.success != null) {
        this.success = other.success;
      }
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public get_schema_result clone() {
      return new get_schema_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_result)
        return this.equals((get_schema_result)that);
      return false;
    }

    public boolean equals(get_schema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_schema_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRING;
          field.id = SUCCESS;
          oprot.writeFieldBegin(field);
          oprot.writeString(this.success);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_tables_args implements TBase, java.io.Serializable, Cloneable   {
    public get_tables_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tables_args(get_tables_args other) {
    }

    public get_tables_args clone() {
      return new get_tables_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tables_args)
        return this.equals((get_tables_args)that);
      return false;
    }

    public boolean equals(get_tables_args that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("get_tables_args");
      oprot.writeStructBegin(struct);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_tables_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_tables_result implements TBase, java.io.Serializable, Cloneable   {
    public List<String> success;
    public static final int SUCCESS = 0;
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean e = false;
    }

    public get_tables_result() {
    }

    public get_tables_result(
      List<String> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.__isset.success = (success != null);
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tables_result(get_tables_result other) {
      __isset.success = other.__isset.success;
      if (other.success != null) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public get_tables_result clone() {
      return new get_tables_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tables_result)
        return this.equals((get_tables_result)that);
      return false;
    }

    public boolean equals(get_tables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list24 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  String _elem26 = null;
                  _elem26 = iprot.readString();
                  this.success.add(_elem26);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_tables_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = SUCCESS;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
            for (String _iter27 : this.success)            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_tables_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class drop_table_args implements TBase, java.io.Serializable, Cloneable   {
    public String name;
    public static final int NAME = 1;
    public boolean if_exists;
    public static final int IF_EXISTS = 2;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean name = false;
      public boolean if_exists = false;
    }

    public drop_table_args() {
      this.if_exists = true;

    }

    public drop_table_args(
      String name,
      boolean if_exists)
    {
      this();
      this.name = name;
      this.__isset.name = (name != null);
      this.if_exists = if_exists;
      this.__isset.if_exists = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_table_args(drop_table_args other) {
      __isset.name = other.__isset.name;
      if (other.name != null) {
        this.name = other.name;
      }
      __isset.if_exists = other.__isset.if_exists;
      this.if_exists = other.if_exists;
    }

    public drop_table_args clone() {
      return new drop_table_args(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_table_args)
        return this.equals((drop_table_args)that);
      return false;
    }

    public boolean equals(drop_table_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_if_exists = true;
      boolean that_present_if_exists = true;
      if (this_present_if_exists || that_present_if_exists) {
        if (!(this_present_if_exists && that_present_if_exists))
          return false;
        if (this.if_exists != that.if_exists)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case IF_EXISTS:
            if (field.type == TType.BOOL) {
              this.if_exists = iprot.readBool();
              this.__isset.if_exists = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {


      TStruct struct = new TStruct("drop_table_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = NAME;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      field.name = "if_exists";
      field.type = TType.BOOL;
      field.id = IF_EXISTS;
      oprot.writeFieldBegin(field);
      oprot.writeBool(this.if_exists);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("drop_table_args(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      if (!first) sb.append(", ");
      sb.append("if_exists:");
      sb.append(this.if_exists);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

  public static class drop_table_result implements TBase, java.io.Serializable, Cloneable   {
    public ClientException e;
    public static final int E = 1;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean e = false;
    }

    public drop_table_result() {
    }

    public drop_table_result(
      ClientException e)
    {
      this();
      this.e = e;
      this.__isset.e = (e != null);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_table_result(drop_table_result other) {
      __isset.e = other.__isset.e;
      if (other.e != null) {
        this.e = new ClientException(other.e);
      }
    }

    public drop_table_result clone() {
      return new drop_table_result(this);
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_table_result)
        return this.equals((drop_table_result)that);
      return false;
    }

    public boolean equals(drop_table_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && (this.e != null);
      boolean that_present_e = true && (that.e != null);
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case E:
            if (field.type == TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
              this.__isset.e = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("drop_table_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.e) {
        if (this.e != null) {
          field.name = "e";
          field.type = TType.STRUCT;
          field.id = E;
          oprot.writeFieldBegin(field);
          this.e.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("drop_table_result(");
      boolean first = true;

      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      sb.append(")");
      return sb.toString();
    }

  }

}
