/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.hypertable.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Describes a ColumnFamily
 * <dl>
 *   <dt>name</dt>
 *   <dd>Name of the column family</dd>
 * 
 *   <dt>ag</dt>
 *   <dd>Name of the access group for this CF</dd>
 * 
 *   <dt>max_versions</dt>
 *   <dd>Max versions of the same cell to be stored</dd>
 * 
 *   <dt>ttl</dt>
 *   <dd>Time to live for cells in the CF (ie delete cells older than this time)</dd>
 * </dl>
 */
public class ColumnFamily implements org.apache.thrift.TBase<ColumnFamily, ColumnFamily._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnFamily");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AG_FIELD_DESC = new org.apache.thrift.protocol.TField("ag", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_versions", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField GENERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("generation", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("has_index", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField HAS_QUALIFIER_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("has_qualifier_index", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField TIME_ORDER_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("time_order_desc", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("counter", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ColumnFamilyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ColumnFamilyTupleSchemeFactory());
  }

  public String name; // required
  public String ag; // required
  public int max_versions; // optional
  public int ttl; // optional
  public long generation; // optional
  public int id; // optional
  public boolean has_index; // optional
  public boolean has_qualifier_index; // optional
  public boolean time_order_desc; // optional
  public boolean deleted; // optional
  public boolean counter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    AG((short)2, "ag"),
    MAX_VERSIONS((short)3, "max_versions"),
    TTL((short)4, "ttl"),
    GENERATION((short)5, "generation"),
    ID((short)6, "id"),
    HAS_INDEX((short)7, "has_index"),
    HAS_QUALIFIER_INDEX((short)8, "has_qualifier_index"),
    TIME_ORDER_DESC((short)9, "time_order_desc"),
    DELETED((short)10, "deleted"),
    COUNTER((short)11, "counter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // AG
          return AG;
        case 3: // MAX_VERSIONS
          return MAX_VERSIONS;
        case 4: // TTL
          return TTL;
        case 5: // GENERATION
          return GENERATION;
        case 6: // ID
          return ID;
        case 7: // HAS_INDEX
          return HAS_INDEX;
        case 8: // HAS_QUALIFIER_INDEX
          return HAS_QUALIFIER_INDEX;
        case 9: // TIME_ORDER_DESC
          return TIME_ORDER_DESC;
        case 10: // DELETED
          return DELETED;
        case 11: // COUNTER
          return COUNTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_VERSIONS_ISSET_ID = 0;
  private static final int __TTL_ISSET_ID = 1;
  private static final int __GENERATION_ISSET_ID = 2;
  private static final int __ID_ISSET_ID = 3;
  private static final int __HAS_INDEX_ISSET_ID = 4;
  private static final int __HAS_QUALIFIER_INDEX_ISSET_ID = 5;
  private static final int __TIME_ORDER_DESC_ISSET_ID = 6;
  private static final int __DELETED_ISSET_ID = 7;
  private static final int __COUNTER_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);
  private _Fields optionals[] = {_Fields.MAX_VERSIONS,_Fields.TTL,_Fields.GENERATION,_Fields.ID,_Fields.HAS_INDEX,_Fields.HAS_QUALIFIER_INDEX,_Fields.TIME_ORDER_DESC,_Fields.DELETED,_Fields.COUNTER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AG, new org.apache.thrift.meta_data.FieldMetaData("ag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("max_versions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GENERATION, new org.apache.thrift.meta_data.FieldMetaData("generation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_INDEX, new org.apache.thrift.meta_data.FieldMetaData("has_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_QUALIFIER_INDEX, new org.apache.thrift.meta_data.FieldMetaData("has_qualifier_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIME_ORDER_DESC, new org.apache.thrift.meta_data.FieldMetaData("time_order_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COUNTER, new org.apache.thrift.meta_data.FieldMetaData("counter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnFamily.class, metaDataMap);
  }

  public ColumnFamily() {
  }

  public ColumnFamily(
    String name,
    String ag)
  {
    this();
    this.name = name;
    this.ag = ag;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnFamily(ColumnFamily other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAg()) {
      this.ag = other.ag;
    }
    this.max_versions = other.max_versions;
    this.ttl = other.ttl;
    this.generation = other.generation;
    this.id = other.id;
    this.has_index = other.has_index;
    this.has_qualifier_index = other.has_qualifier_index;
    this.time_order_desc = other.time_order_desc;
    this.deleted = other.deleted;
    this.counter = other.counter;
  }

  public ColumnFamily deepCopy() {
    return new ColumnFamily(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.ag = null;
    setMax_versionsIsSet(false);
    this.max_versions = 0;
    setTtlIsSet(false);
    this.ttl = 0;
    setGenerationIsSet(false);
    this.generation = 0;
    setIdIsSet(false);
    this.id = 0;
    setHas_indexIsSet(false);
    this.has_index = false;
    setHas_qualifier_indexIsSet(false);
    this.has_qualifier_index = false;
    setTime_order_descIsSet(false);
    this.time_order_desc = false;
    setDeletedIsSet(false);
    this.deleted = false;
    setCounterIsSet(false);
    this.counter = false;
  }

  public String getName() {
    return this.name;
  }

  public ColumnFamily setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getAg() {
    return this.ag;
  }

  public ColumnFamily setAg(String ag) {
    this.ag = ag;
    return this;
  }

  public void unsetAg() {
    this.ag = null;
  }

  /** Returns true if field ag is set (has been assigned a value) and false otherwise */
  public boolean isSetAg() {
    return this.ag != null;
  }

  public void setAgIsSet(boolean value) {
    if (!value) {
      this.ag = null;
    }
  }

  public int getMax_versions() {
    return this.max_versions;
  }

  public ColumnFamily setMax_versions(int max_versions) {
    this.max_versions = max_versions;
    setMax_versionsIsSet(true);
    return this;
  }

  public void unsetMax_versions() {
    __isset_bit_vector.clear(__MAX_VERSIONS_ISSET_ID);
  }

  /** Returns true if field max_versions is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_versions() {
    return __isset_bit_vector.get(__MAX_VERSIONS_ISSET_ID);
  }

  public void setMax_versionsIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_VERSIONS_ISSET_ID, value);
  }

  public int getTtl() {
    return this.ttl;
  }

  public ColumnFamily setTtl(int ttl) {
    this.ttl = ttl;
    setTtlIsSet(true);
    return this;
  }

  public void unsetTtl() {
    __isset_bit_vector.clear(__TTL_ISSET_ID);
  }

  /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
  public boolean isSetTtl() {
    return __isset_bit_vector.get(__TTL_ISSET_ID);
  }

  public void setTtlIsSet(boolean value) {
    __isset_bit_vector.set(__TTL_ISSET_ID, value);
  }

  public long getGeneration() {
    return this.generation;
  }

  public ColumnFamily setGeneration(long generation) {
    this.generation = generation;
    setGenerationIsSet(true);
    return this;
  }

  public void unsetGeneration() {
    __isset_bit_vector.clear(__GENERATION_ISSET_ID);
  }

  /** Returns true if field generation is set (has been assigned a value) and false otherwise */
  public boolean isSetGeneration() {
    return __isset_bit_vector.get(__GENERATION_ISSET_ID);
  }

  public void setGenerationIsSet(boolean value) {
    __isset_bit_vector.set(__GENERATION_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public ColumnFamily setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public boolean isHas_index() {
    return this.has_index;
  }

  public ColumnFamily setHas_index(boolean has_index) {
    this.has_index = has_index;
    setHas_indexIsSet(true);
    return this;
  }

  public void unsetHas_index() {
    __isset_bit_vector.clear(__HAS_INDEX_ISSET_ID);
  }

  /** Returns true if field has_index is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_index() {
    return __isset_bit_vector.get(__HAS_INDEX_ISSET_ID);
  }

  public void setHas_indexIsSet(boolean value) {
    __isset_bit_vector.set(__HAS_INDEX_ISSET_ID, value);
  }

  public boolean isHas_qualifier_index() {
    return this.has_qualifier_index;
  }

  public ColumnFamily setHas_qualifier_index(boolean has_qualifier_index) {
    this.has_qualifier_index = has_qualifier_index;
    setHas_qualifier_indexIsSet(true);
    return this;
  }

  public void unsetHas_qualifier_index() {
    __isset_bit_vector.clear(__HAS_QUALIFIER_INDEX_ISSET_ID);
  }

  /** Returns true if field has_qualifier_index is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_qualifier_index() {
    return __isset_bit_vector.get(__HAS_QUALIFIER_INDEX_ISSET_ID);
  }

  public void setHas_qualifier_indexIsSet(boolean value) {
    __isset_bit_vector.set(__HAS_QUALIFIER_INDEX_ISSET_ID, value);
  }

  public boolean isTime_order_desc() {
    return this.time_order_desc;
  }

  public ColumnFamily setTime_order_desc(boolean time_order_desc) {
    this.time_order_desc = time_order_desc;
    setTime_order_descIsSet(true);
    return this;
  }

  public void unsetTime_order_desc() {
    __isset_bit_vector.clear(__TIME_ORDER_DESC_ISSET_ID);
  }

  /** Returns true if field time_order_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_order_desc() {
    return __isset_bit_vector.get(__TIME_ORDER_DESC_ISSET_ID);
  }

  public void setTime_order_descIsSet(boolean value) {
    __isset_bit_vector.set(__TIME_ORDER_DESC_ISSET_ID, value);
  }

  public boolean isDeleted() {
    return this.deleted;
  }

  public ColumnFamily setDeleted(boolean deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
    return this;
  }

  public void unsetDeleted() {
    __isset_bit_vector.clear(__DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return __isset_bit_vector.get(__DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bit_vector.set(__DELETED_ISSET_ID, value);
  }

  public boolean isCounter() {
    return this.counter;
  }

  public ColumnFamily setCounter(boolean counter) {
    this.counter = counter;
    setCounterIsSet(true);
    return this;
  }

  public void unsetCounter() {
    __isset_bit_vector.clear(__COUNTER_ISSET_ID);
  }

  /** Returns true if field counter is set (has been assigned a value) and false otherwise */
  public boolean isSetCounter() {
    return __isset_bit_vector.get(__COUNTER_ISSET_ID);
  }

  public void setCounterIsSet(boolean value) {
    __isset_bit_vector.set(__COUNTER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case AG:
      if (value == null) {
        unsetAg();
      } else {
        setAg((String)value);
      }
      break;

    case MAX_VERSIONS:
      if (value == null) {
        unsetMax_versions();
      } else {
        setMax_versions((Integer)value);
      }
      break;

    case TTL:
      if (value == null) {
        unsetTtl();
      } else {
        setTtl((Integer)value);
      }
      break;

    case GENERATION:
      if (value == null) {
        unsetGeneration();
      } else {
        setGeneration((Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case HAS_INDEX:
      if (value == null) {
        unsetHas_index();
      } else {
        setHas_index((Boolean)value);
      }
      break;

    case HAS_QUALIFIER_INDEX:
      if (value == null) {
        unsetHas_qualifier_index();
      } else {
        setHas_qualifier_index((Boolean)value);
      }
      break;

    case TIME_ORDER_DESC:
      if (value == null) {
        unsetTime_order_desc();
      } else {
        setTime_order_desc((Boolean)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Boolean)value);
      }
      break;

    case COUNTER:
      if (value == null) {
        unsetCounter();
      } else {
        setCounter((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case AG:
      return getAg();

    case MAX_VERSIONS:
      return Integer.valueOf(getMax_versions());

    case TTL:
      return Integer.valueOf(getTtl());

    case GENERATION:
      return Long.valueOf(getGeneration());

    case ID:
      return Integer.valueOf(getId());

    case HAS_INDEX:
      return Boolean.valueOf(isHas_index());

    case HAS_QUALIFIER_INDEX:
      return Boolean.valueOf(isHas_qualifier_index());

    case TIME_ORDER_DESC:
      return Boolean.valueOf(isTime_order_desc());

    case DELETED:
      return Boolean.valueOf(isDeleted());

    case COUNTER:
      return Boolean.valueOf(isCounter());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case AG:
      return isSetAg();
    case MAX_VERSIONS:
      return isSetMax_versions();
    case TTL:
      return isSetTtl();
    case GENERATION:
      return isSetGeneration();
    case ID:
      return isSetId();
    case HAS_INDEX:
      return isSetHas_index();
    case HAS_QUALIFIER_INDEX:
      return isSetHas_qualifier_index();
    case TIME_ORDER_DESC:
      return isSetTime_order_desc();
    case DELETED:
      return isSetDeleted();
    case COUNTER:
      return isSetCounter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ColumnFamily)
      return this.equals((ColumnFamily)that);
    return false;
  }

  public boolean equals(ColumnFamily that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_ag = true && this.isSetAg();
    boolean that_present_ag = true && that.isSetAg();
    if (this_present_ag || that_present_ag) {
      if (!(this_present_ag && that_present_ag))
        return false;
      if (!this.ag.equals(that.ag))
        return false;
    }

    boolean this_present_max_versions = true && this.isSetMax_versions();
    boolean that_present_max_versions = true && that.isSetMax_versions();
    if (this_present_max_versions || that_present_max_versions) {
      if (!(this_present_max_versions && that_present_max_versions))
        return false;
      if (this.max_versions != that.max_versions)
        return false;
    }

    boolean this_present_ttl = true && this.isSetTtl();
    boolean that_present_ttl = true && that.isSetTtl();
    if (this_present_ttl || that_present_ttl) {
      if (!(this_present_ttl && that_present_ttl))
        return false;
      if (this.ttl != that.ttl)
        return false;
    }

    boolean this_present_generation = true && this.isSetGeneration();
    boolean that_present_generation = true && that.isSetGeneration();
    if (this_present_generation || that_present_generation) {
      if (!(this_present_generation && that_present_generation))
        return false;
      if (this.generation != that.generation)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_has_index = true && this.isSetHas_index();
    boolean that_present_has_index = true && that.isSetHas_index();
    if (this_present_has_index || that_present_has_index) {
      if (!(this_present_has_index && that_present_has_index))
        return false;
      if (this.has_index != that.has_index)
        return false;
    }

    boolean this_present_has_qualifier_index = true && this.isSetHas_qualifier_index();
    boolean that_present_has_qualifier_index = true && that.isSetHas_qualifier_index();
    if (this_present_has_qualifier_index || that_present_has_qualifier_index) {
      if (!(this_present_has_qualifier_index && that_present_has_qualifier_index))
        return false;
      if (this.has_qualifier_index != that.has_qualifier_index)
        return false;
    }

    boolean this_present_time_order_desc = true && this.isSetTime_order_desc();
    boolean that_present_time_order_desc = true && that.isSetTime_order_desc();
    if (this_present_time_order_desc || that_present_time_order_desc) {
      if (!(this_present_time_order_desc && that_present_time_order_desc))
        return false;
      if (this.time_order_desc != that.time_order_desc)
        return false;
    }

    boolean this_present_deleted = true && this.isSetDeleted();
    boolean that_present_deleted = true && that.isSetDeleted();
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    boolean this_present_counter = true && this.isSetCounter();
    boolean that_present_counter = true && that.isSetCounter();
    if (this_present_counter || that_present_counter) {
      if (!(this_present_counter && that_present_counter))
        return false;
      if (this.counter != that.counter)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ColumnFamily other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ColumnFamily typedOther = (ColumnFamily)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAg()).compareTo(typedOther.isSetAg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ag, typedOther.ag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_versions()).compareTo(typedOther.isSetMax_versions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_versions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_versions, typedOther.max_versions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtl()).compareTo(typedOther.isSetTtl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, typedOther.ttl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeneration()).compareTo(typedOther.isSetGeneration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeneration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generation, typedOther.generation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_index()).compareTo(typedOther.isSetHas_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_index, typedOther.has_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_qualifier_index()).compareTo(typedOther.isSetHas_qualifier_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_qualifier_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_qualifier_index, typedOther.has_qualifier_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime_order_desc()).compareTo(typedOther.isSetTime_order_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_order_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_order_desc, typedOther.time_order_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(typedOther.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, typedOther.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounter()).compareTo(typedOther.isSetCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counter, typedOther.counter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ColumnFamily(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ag:");
    if (this.ag == null) {
      sb.append("null");
    } else {
      sb.append(this.ag);
    }
    first = false;
    if (isSetMax_versions()) {
      if (!first) sb.append(", ");
      sb.append("max_versions:");
      sb.append(this.max_versions);
      first = false;
    }
    if (isSetTtl()) {
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
    }
    if (isSetGeneration()) {
      if (!first) sb.append(", ");
      sb.append("generation:");
      sb.append(this.generation);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetHas_index()) {
      if (!first) sb.append(", ");
      sb.append("has_index:");
      sb.append(this.has_index);
      first = false;
    }
    if (isSetHas_qualifier_index()) {
      if (!first) sb.append(", ");
      sb.append("has_qualifier_index:");
      sb.append(this.has_qualifier_index);
      first = false;
    }
    if (isSetTime_order_desc()) {
      if (!first) sb.append(", ");
      sb.append("time_order_desc:");
      sb.append(this.time_order_desc);
      first = false;
    }
    if (isSetDeleted()) {
      if (!first) sb.append(", ");
      sb.append("deleted:");
      sb.append(this.deleted);
      first = false;
    }
    if (isSetCounter()) {
      if (!first) sb.append(", ");
      sb.append("counter:");
      sb.append(this.counter);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ColumnFamilyStandardSchemeFactory implements SchemeFactory {
    public ColumnFamilyStandardScheme getScheme() {
      return new ColumnFamilyStandardScheme();
    }
  }

  private static class ColumnFamilyStandardScheme extends StandardScheme<ColumnFamily> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnFamily struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ag = iprot.readString();
              struct.setAgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_versions = iprot.readI32();
              struct.setMax_versionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TTL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ttl = iprot.readI32();
              struct.setTtlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GENERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.generation = iprot.readI64();
              struct.setGenerationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAS_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_index = iprot.readBool();
              struct.setHas_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HAS_QUALIFIER_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_qualifier_index = iprot.readBool();
              struct.setHas_qualifier_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIME_ORDER_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.time_order_desc = iprot.readBool();
              struct.setTime_order_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.counter = iprot.readBool();
              struct.setCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnFamily struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.ag != null) {
        oprot.writeFieldBegin(AG_FIELD_DESC);
        oprot.writeString(struct.ag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_versions()) {
        oprot.writeFieldBegin(MAX_VERSIONS_FIELD_DESC);
        oprot.writeI32(struct.max_versions);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTtl()) {
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI32(struct.ttl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGeneration()) {
        oprot.writeFieldBegin(GENERATION_FIELD_DESC);
        oprot.writeI64(struct.generation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHas_index()) {
        oprot.writeFieldBegin(HAS_INDEX_FIELD_DESC);
        oprot.writeBool(struct.has_index);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHas_qualifier_index()) {
        oprot.writeFieldBegin(HAS_QUALIFIER_INDEX_FIELD_DESC);
        oprot.writeBool(struct.has_qualifier_index);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTime_order_desc()) {
        oprot.writeFieldBegin(TIME_ORDER_DESC_FIELD_DESC);
        oprot.writeBool(struct.time_order_desc);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeleted()) {
        oprot.writeFieldBegin(DELETED_FIELD_DESC);
        oprot.writeBool(struct.deleted);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCounter()) {
        oprot.writeFieldBegin(COUNTER_FIELD_DESC);
        oprot.writeBool(struct.counter);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ColumnFamilyTupleSchemeFactory implements SchemeFactory {
    public ColumnFamilyTupleScheme getScheme() {
      return new ColumnFamilyTupleScheme();
    }
  }

  private static class ColumnFamilyTupleScheme extends TupleScheme<ColumnFamily> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ColumnFamily struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetAg()) {
        optionals.set(1);
      }
      if (struct.isSetMax_versions()) {
        optionals.set(2);
      }
      if (struct.isSetTtl()) {
        optionals.set(3);
      }
      if (struct.isSetGeneration()) {
        optionals.set(4);
      }
      if (struct.isSetId()) {
        optionals.set(5);
      }
      if (struct.isSetHas_index()) {
        optionals.set(6);
      }
      if (struct.isSetHas_qualifier_index()) {
        optionals.set(7);
      }
      if (struct.isSetTime_order_desc()) {
        optionals.set(8);
      }
      if (struct.isSetDeleted()) {
        optionals.set(9);
      }
      if (struct.isSetCounter()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetAg()) {
        oprot.writeString(struct.ag);
      }
      if (struct.isSetMax_versions()) {
        oprot.writeI32(struct.max_versions);
      }
      if (struct.isSetTtl()) {
        oprot.writeI32(struct.ttl);
      }
      if (struct.isSetGeneration()) {
        oprot.writeI64(struct.generation);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetHas_index()) {
        oprot.writeBool(struct.has_index);
      }
      if (struct.isSetHas_qualifier_index()) {
        oprot.writeBool(struct.has_qualifier_index);
      }
      if (struct.isSetTime_order_desc()) {
        oprot.writeBool(struct.time_order_desc);
      }
      if (struct.isSetDeleted()) {
        oprot.writeBool(struct.deleted);
      }
      if (struct.isSetCounter()) {
        oprot.writeBool(struct.counter);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ColumnFamily struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ag = iprot.readString();
        struct.setAgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.max_versions = iprot.readI32();
        struct.setMax_versionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ttl = iprot.readI32();
        struct.setTtlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.generation = iprot.readI64();
        struct.setGenerationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.has_index = iprot.readBool();
        struct.setHas_indexIsSet(true);
      }
      if (incoming.get(7)) {
        struct.has_qualifier_index = iprot.readBool();
        struct.setHas_qualifier_indexIsSet(true);
      }
      if (incoming.get(8)) {
        struct.time_order_desc = iprot.readBool();
        struct.setTime_order_descIsSet(true);
      }
      if (incoming.get(9)) {
        struct.deleted = iprot.readBool();
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(10)) {
        struct.counter = iprot.readBool();
        struct.setCounterIsSet(true);
      }
    }
  }

}

