/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.hypertable.thriftgen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Describes a schema
 * <dl>
 *   <dt>name</dt>
 *   <dd>Name of the access group</dd>
 * 
 *   <dt>in_memory</dt>
 *   <dd>Is this access group in memory</dd>
 * 
 *   <dt>replication</dt>
 *   <dd>Replication factor for this AG</dd>
 * 
 *   <dt>blocksize</dt>
 *   <dd>Specifies blocksize for this AG</dd>
 * 
 *   <dt>compressor</dt>
 *   <dd>Specifies compressor for this AG</dd>
 * 
 *   <dt>bloom_filter</dt>
 *   <dd>Specifies bloom filter type</dd>
 * 
 *   <dt>columns</dt>
 *   <dd>Specifies list of column families in this AG</dd>
 * </dl>
 */
public class Schema implements TBase<Schema._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Schema");

  private static final TField ACCESS_GROUPS_FIELD_DESC = new TField("access_groups", TType.MAP, (short)1);
  private static final TField COLUMN_FAMILIES_FIELD_DESC = new TField("column_families", TType.MAP, (short)2);

  public Map<String,AccessGroup> access_groups;
  public Map<String,ColumnFamily> column_families;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ACCESS_GROUPS((short)1, "access_groups"),
    COLUMN_FAMILIES((short)2, "column_families");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.ACCESS_GROUPS, new FieldMetaData("access_groups", TFieldRequirementType.OPTIONAL, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new StructMetaData(TType.STRUCT, AccessGroup.class))));
    put(_Fields.COLUMN_FAMILIES, new FieldMetaData("column_families", TFieldRequirementType.OPTIONAL, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new StructMetaData(TType.STRUCT, ColumnFamily.class))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Schema.class, metaDataMap);
  }

  public Schema() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Schema(Schema other) {
    if (other.isSetAccess_groups()) {
      Map<String,AccessGroup> __this__access_groups = new HashMap<String,AccessGroup>();
      for (Map.Entry<String, AccessGroup> other_element : other.access_groups.entrySet()) {

        String other_element_key = other_element.getKey();
        AccessGroup other_element_value = other_element.getValue();

        String __this__access_groups_copy_key = other_element_key;

        AccessGroup __this__access_groups_copy_value = new AccessGroup(other_element_value);

        __this__access_groups.put(__this__access_groups_copy_key, __this__access_groups_copy_value);
      }
      this.access_groups = __this__access_groups;
    }
    if (other.isSetColumn_families()) {
      Map<String,ColumnFamily> __this__column_families = new HashMap<String,ColumnFamily>();
      for (Map.Entry<String, ColumnFamily> other_element : other.column_families.entrySet()) {

        String other_element_key = other_element.getKey();
        ColumnFamily other_element_value = other_element.getValue();

        String __this__column_families_copy_key = other_element_key;

        ColumnFamily __this__column_families_copy_value = new ColumnFamily(other_element_value);

        __this__column_families.put(__this__column_families_copy_key, __this__column_families_copy_value);
      }
      this.column_families = __this__column_families;
    }
  }

  public Schema deepCopy() {
    return new Schema(this);
  }

  @Deprecated
  public Schema clone() {
    return new Schema(this);
  }

  public int getAccess_groupsSize() {
    return (this.access_groups == null) ? 0 : this.access_groups.size();
  }

  public void putToAccess_groups(String key, AccessGroup val) {
    if (this.access_groups == null) {
      this.access_groups = new HashMap<String,AccessGroup>();
    }
    this.access_groups.put(key, val);
  }

  public Map<String,AccessGroup> getAccess_groups() {
    return this.access_groups;
  }

  public Schema setAccess_groups(Map<String,AccessGroup> access_groups) {
    this.access_groups = access_groups;
    return this;
  }

  public void unsetAccess_groups() {
    this.access_groups = null;
  }

  /** Returns true if field access_groups is set (has been asigned a value) and false otherwise */
  public boolean isSetAccess_groups() {
    return this.access_groups != null;
  }

  public void setAccess_groupsIsSet(boolean value) {
    if (!value) {
      this.access_groups = null;
    }
  }

  public int getColumn_familiesSize() {
    return (this.column_families == null) ? 0 : this.column_families.size();
  }

  public void putToColumn_families(String key, ColumnFamily val) {
    if (this.column_families == null) {
      this.column_families = new HashMap<String,ColumnFamily>();
    }
    this.column_families.put(key, val);
  }

  public Map<String,ColumnFamily> getColumn_families() {
    return this.column_families;
  }

  public Schema setColumn_families(Map<String,ColumnFamily> column_families) {
    this.column_families = column_families;
    return this;
  }

  public void unsetColumn_families() {
    this.column_families = null;
  }

  /** Returns true if field column_families is set (has been asigned a value) and false otherwise */
  public boolean isSetColumn_families() {
    return this.column_families != null;
  }

  public void setColumn_familiesIsSet(boolean value) {
    if (!value) {
      this.column_families = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCESS_GROUPS:
      if (value == null) {
        unsetAccess_groups();
      } else {
        setAccess_groups((Map<String,AccessGroup>)value);
      }
      break;

    case COLUMN_FAMILIES:
      if (value == null) {
        unsetColumn_families();
      } else {
        setColumn_families((Map<String,ColumnFamily>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCESS_GROUPS:
      return getAccess_groups();

    case COLUMN_FAMILIES:
      return getColumn_families();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case ACCESS_GROUPS:
      return isSetAccess_groups();
    case COLUMN_FAMILIES:
      return isSetColumn_families();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Schema)
      return this.equals((Schema)that);
    return false;
  }

  public boolean equals(Schema that) {
    if (that == null)
      return false;

    boolean this_present_access_groups = true && this.isSetAccess_groups();
    boolean that_present_access_groups = true && that.isSetAccess_groups();
    if (this_present_access_groups || that_present_access_groups) {
      if (!(this_present_access_groups && that_present_access_groups))
        return false;
      if (!this.access_groups.equals(that.access_groups))
        return false;
    }

    boolean this_present_column_families = true && this.isSetColumn_families();
    boolean that_present_column_families = true && that.isSetColumn_families();
    if (this_present_column_families || that_present_column_families) {
      if (!(this_present_column_families && that_present_column_families))
        return false;
      if (!this.column_families.equals(that.column_families))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case ACCESS_GROUPS:
            if (field.type == TType.MAP) {
              {
                TMap _map16 = iprot.readMapBegin();
                this.access_groups = new HashMap<String,AccessGroup>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  String _key18;
                  AccessGroup _val19;
                  _key18 = iprot.readString();
                  _val19 = new AccessGroup();
                  _val19.read(iprot);
                  this.access_groups.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case COLUMN_FAMILIES:
            if (field.type == TType.MAP) {
              {
                TMap _map20 = iprot.readMapBegin();
                this.column_families = new HashMap<String,ColumnFamily>(2*_map20.size);
                for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                {
                  String _key22;
                  ColumnFamily _val23;
                  _key22 = iprot.readString();
                  _val23 = new ColumnFamily();
                  _val23.read(iprot);
                  this.column_families.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.access_groups != null) {
      if (isSetAccess_groups()) {
        oprot.writeFieldBegin(ACCESS_GROUPS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.access_groups.size()));
          for (Map.Entry<String, AccessGroup> _iter24 : this.access_groups.entrySet())
          {
            oprot.writeString(_iter24.getKey());
            _iter24.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.column_families != null) {
      if (isSetColumn_families()) {
        oprot.writeFieldBegin(COLUMN_FAMILIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.column_families.size()));
          for (Map.Entry<String, ColumnFamily> _iter25 : this.column_families.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            _iter25.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Schema(");
    boolean first = true;

    if (isSetAccess_groups()) {
      sb.append("access_groups:");
      if (this.access_groups == null) {
        sb.append("null");
      } else {
        sb.append(this.access_groups);
      }
      first = false;
    }
    if (isSetColumn_families()) {
      if (!first) sb.append(", ");
      sb.append("column_families:");
      if (this.column_families == null) {
        sb.append("null");
      } else {
        sb.append(this.column_families);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

