/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.hypertable.thriftgen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class RowInterval implements TBase, java.io.Serializable, Cloneable {
  public String start_row;
  public static final int START_ROW = 1;
  public boolean start_inclusive;
  public static final int START_INCLUSIVE = 2;
  public String end_row;
  public static final int END_ROW = 3;
  public boolean end_inclusive;
  public static final int END_INCLUSIVE = 4;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean start_row = false;
    public boolean start_inclusive = false;
    public boolean end_row = false;
    public boolean end_inclusive = false;
  }

  public RowInterval() {
    this.start_inclusive = true;

    this.end_inclusive = true;

  }

  public RowInterval(
    String start_row,
    boolean start_inclusive,
    String end_row,
    boolean end_inclusive)
  {
    this();
    this.start_row = start_row;
    this.__isset.start_row = (start_row != null);
    this.start_inclusive = start_inclusive;
    this.__isset.start_inclusive = true;
    this.end_row = end_row;
    this.__isset.end_row = (end_row != null);
    this.end_inclusive = end_inclusive;
    this.__isset.end_inclusive = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RowInterval(RowInterval other) {
    __isset.start_row = other.__isset.start_row;
    if (other.start_row != null) {
      this.start_row = other.start_row;
    }
    __isset.start_inclusive = other.__isset.start_inclusive;
    this.start_inclusive = other.start_inclusive;
    __isset.end_row = other.__isset.end_row;
    if (other.end_row != null) {
      this.end_row = other.end_row;
    }
    __isset.end_inclusive = other.__isset.end_inclusive;
    this.end_inclusive = other.end_inclusive;
  }

  public RowInterval clone() {
    return new RowInterval(this);
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RowInterval)
      return this.equals((RowInterval)that);
    return false;
  }

  public boolean equals(RowInterval that) {
    if (that == null)
      return false;

    boolean this_present_start_row = true && (this.__isset.start_row) && (this.start_row != null);
    boolean that_present_start_row = true && (that.__isset.start_row) && (that.start_row != null);
    if (this_present_start_row || that_present_start_row) {
      if (!(this_present_start_row && that_present_start_row))
        return false;
      if (!this.start_row.equals(that.start_row))
        return false;
    }

    boolean this_present_start_inclusive = true && (this.__isset.start_inclusive);
    boolean that_present_start_inclusive = true && (that.__isset.start_inclusive);
    if (this_present_start_inclusive || that_present_start_inclusive) {
      if (!(this_present_start_inclusive && that_present_start_inclusive))
        return false;
      if (this.start_inclusive != that.start_inclusive)
        return false;
    }

    boolean this_present_end_row = true && (this.__isset.end_row) && (this.end_row != null);
    boolean that_present_end_row = true && (that.__isset.end_row) && (that.end_row != null);
    if (this_present_end_row || that_present_end_row) {
      if (!(this_present_end_row && that_present_end_row))
        return false;
      if (!this.end_row.equals(that.end_row))
        return false;
    }

    boolean this_present_end_inclusive = true && (this.__isset.end_inclusive);
    boolean that_present_end_inclusive = true && (that.__isset.end_inclusive);
    if (this_present_end_inclusive || that_present_end_inclusive) {
      if (!(this_present_end_inclusive && that_present_end_inclusive))
        return false;
      if (this.end_inclusive != that.end_inclusive)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case START_ROW:
          if (field.type == TType.STRING) {
            this.start_row = iprot.readString();
            this.__isset.start_row = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case START_INCLUSIVE:
          if (field.type == TType.BOOL) {
            this.start_inclusive = iprot.readBool();
            this.__isset.start_inclusive = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case END_ROW:
          if (field.type == TType.STRING) {
            this.end_row = iprot.readString();
            this.__isset.end_row = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case END_INCLUSIVE:
          if (field.type == TType.BOOL) {
            this.end_inclusive = iprot.readBool();
            this.__isset.end_inclusive = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields
  }

  public void write(TProtocol oprot) throws TException {


    TStruct struct = new TStruct("RowInterval");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.start_row != null) {
      field.name = "start_row";
      field.type = TType.STRING;
      field.id = START_ROW;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.start_row);
      oprot.writeFieldEnd();
    }
    field.name = "start_inclusive";
    field.type = TType.BOOL;
    field.id = START_INCLUSIVE;
    oprot.writeFieldBegin(field);
    oprot.writeBool(this.start_inclusive);
    oprot.writeFieldEnd();
    if (this.end_row != null) {
      field.name = "end_row";
      field.type = TType.STRING;
      field.id = END_ROW;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.end_row);
      oprot.writeFieldEnd();
    }
    field.name = "end_inclusive";
    field.type = TType.BOOL;
    field.id = END_INCLUSIVE;
    oprot.writeFieldBegin(field);
    oprot.writeBool(this.end_inclusive);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("RowInterval(");
    boolean first = true;

    if (__isset.start_row) {
      if (!first) sb.append(", ");
      sb.append("start_row:");
      sb.append(this.start_row);
      first = false;
    }
    if (__isset.start_inclusive) {
      if (!first) sb.append(", ");
      sb.append("start_inclusive:");
      sb.append(this.start_inclusive);
      first = false;
    }
    if (__isset.end_row) {
      if (!first) sb.append(", ");
      sb.append("end_row:");
      sb.append(this.end_row);
      first = false;
    }
    if (__isset.end_inclusive) {
      if (!first) sb.append(", ");
      sb.append("end_inclusive:");
      sb.append(this.end_inclusive);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

}

