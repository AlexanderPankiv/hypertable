Version 0.9.2.0:
(2009-01-05)

  * Fixed initialization problem that caused ConnectionManager thread to exit immediately
  * Fixed build for boost 1.35+
  * Issue 209: Fixed build with gcc 4.3+
  * [issue 216] Fixed problem where clock skew was causing updates to be dropped
  * [issue 201] Fixed deadlock recently introduced with support for SplitOff=high
  * Made commit log more robust
  * Added calls to FSDataOutputStream.sync() for FLUSH for HdfsBroker
  * Fixed range server metalog reader
  * Made RangeServer::load_range() call in Master::report_split() synchronous
  * Fix for ReactorRunner to not use handle if de-registering its fd failed
  * Fixed and expanded split-recovery integration test
  * Worked around compiler (gcc 4.1 vs 4.0) quirks in overloading
  * Fixed a bug in converting hypertable cell to thrift cell that was setting the
    wrong column qualifiers in subsequent cells that don't have column qualifiers.
  * [issue 193] Added table generation to CellStoreTrailer
  * [issue 206] Fixed problem where CommitLog fd gets into bad state
  * Fixed race condition in RangeServer::load_range (reported by Phoenix)
  * Wrapped compaction logic in try/catch block to ensure maintenance bit gets cleared on exception (reported by Phoenix)
  * Added support for Hypertable.CommitLog.SkipErrors (default is now ASSERT)
  * Got rid of shutdown segfault in ReactorRunner by only printing LOG message if !shutdown
  * Added support for Hypertable.RangeServer.CommitLog.Flush
  * Got rid of Kfs.Broker.Flush property (in favor of Hypertable.RangeServer.CommitLog.Flush)
  * Expanded split-recovery integration test
  * Updated README to include a link to a working snapshot of thrift
  * Fixed timeout usage in various language bindings
  * Also added destructors (or similar mechanism) to close transport
  * Fixed some javac dependency issues caused by package/path mismatch
  * Added a boolean flag to allow Client::open_table to bypass cache
  * Made spirit parsers thread safe
  * Allow hypertable clients to take different config files
  * Fixed custom validate issues with properties
  * Added regression tests for Properties
  * Fixed Hyperspace callback signature for 'master' file
  * Added options to skip errors in metalogs (default throws)
  * Updated regression tests for range server metalog
  * FindBoost.cmake fix for Boost 1.37
  * Changed type of Kfs.Broker.Flush from i32 to bool

Version 0.9.1.1:
(2008-12-23)

  * Changed default value for Hypertable.RangeServer.CommitLog.RollLimit back to 100MB
  * [issue196] Added escape/unescape logic to select and LDI
  * Eliminated race condition that caused ASSERT with multiple maintenance threads
  * Got rid of alignment logic in CellCachePool
  * Changed 'range not found' error to info message in RangeServer::create_scanner
  * Fixed seg fault during construction of 2nd Client object
  * Fixed bug in MetadataRoot::get_next_files
  * Added commit log gc integration test
  * Fixed bug in commit log gc logic
  * [issue162] Fixed pread bug in HdfsBroker
  * Upgraded to Hadoop 0.19.0
  * Fixed seg fault in Comm destruction sequence
  * Fixed shutdown logic in ConnectionManager
  * Changed default value for Hypertable.RangeServer.Range.SplitOff property to "high"
  * Fixed problem with System::locate_install_dir for binaries running outside a normal installation
  * Fixed some Timer problems introduced with millisecond change
  * Plumbed debug() method through Filesystem class down into brokers
  * Fixed seg fault in serverup on shutdown
  * Fixed cmake FindKfs logic
  * More build dependency cleanups (now truely independent of thrift)
  * Finished support for Hypertable.RangeServer.Range.SplitOff=(high|low)
  * Added aol-time-order integration test to validate proper functioning of 'high' mode
  * Wait for all DFSBroker files to close before removing directories
  * Made thrift support really (it was intend to be but not) optional
  * Made version number more accurate as well.
  * Fixed cyclic dependency between Common and AsyncComm libraries
  * Fixed some Capfile issues; added test/integration
  * Reorganized the toplevel test directory a bit
  * Added a doc/README that points people to hypertable.org
  * Removed ThriftBroker startup dependency on /hypertable/tables/METADATA hyperspace file
  * Also fixed hang/crash problem in Comm::~Comm

Version 0.9.1.0:
(2008-12-08)

  * Added a simple thrift broker for hypertable services
  * Fixed build issues and warnings on 64-bit CentOS
  * Use CMAKE_DL_LIBS instead of -ldl for portability
  * Coding convention cleanups
  * Fixed a race condition in Master::report_split
  * Added CellCache memory pool + fixed memory accounting
  * Made Hyperspace command shell utility reuse Hypertable command shell code.
  * Fixed crash with > 1 maintenance threads
  * Fixed ROW_OVERFLOW regression
  * [issue 177] Changed all integers written into Hyperspace into ASCII strings
  * Added better diagnostic output for checksum mismatch errors
  * Changed all timeouts from seconds to milliseconds
  * Upgraded Comm header
  * Fixed crash in INSERT command with columns with no qualifiers
  * Added (optional) timer to Hyperspace and Master clients
  * Fix for issue#170.
  * Hypertable Client now contains a RangeLocator
  * Refactored Config to allow easy composition of component policies
  * Adopted SIGAR for cross-platform system info/stat
  * Added MT-safe/faster code to parse ip address
  * Issue 156: simple row/range level transaction support
  * Removed extra connection manager for METADATA table used by Master
  * Preserve column family order in HQL schema
  * Refactored out HqlInterpreter from HqlCommandInterpreter
  * Added support for RAII idiom with ScopeGuard and friends
  * Added a generic Locker for any object with lock/unlock methods
  * Added HT_ASSERT as a short cut of HT_EXPECT(expr, Error::FAILED_EXPECTATION)
  * Worked around StringUtil::vform problem in log4cpp 1.0 for certain platforms.
  * Refactored handle_event a bit to reduce code duplications
  * Fixed a few (nread < 0) cases, where nread is size_t.
  * Added System::rand64()
  * Updated installation instructions based on feedbacks
  * Cleanups for gcc 4.3+
  * Made HypertableJavaComponents a cmake target
  * Refactored FindKfs.cmake
  * Added a few missing ", or any later version." to GPL license blurbs
  * Fixed a situation where some cellstores are not GC'ed
  * Made some metalog entry errors non-fatal
  * Fixed column family TTL feature and added regression test for it. (Issue #160)


Version 0.9.0.12:
(2008-11-08)

  * Fixed TableMutatorScatterBuffer hang problem
  * Fixed bug in MergeScanner and added optimized MergeScanner for scans with m_return_deletes
  * Upgraded to Hadoop 0.18.2
  * Fixed random read performance regression
  * Fixed descriptor leak in HdfsBroker
  * [issue 166] Fixed problem of bad disk usage accounting which caused SEGFAULT
  * Added log rotation via cronolog
  * Added option for dump_metalog to copy a metalog
  * Bump the stream log buffer size to 4KB for longer backtrace
  * Added --wait option for serverup serverup dfsbroker had been timing out too soon
  * Fixed default timestamp value on the KeySpec contructor args
  * Added more detailed error info for unexpected metalog entries
  * Fixed a race condition in update while local recovery is in progress
  * Removed old code that was causing last_table_id resetting to 0 upon Master restart.
  * Use thread-safe gethostbyname_r on linux (was causing SEGFAULT)

Version 0.9.0.11:
(2008-09-30)

  * Fixed problem with commit log garbage collection
  * Overhaul: cleaned up AccessGroup compaction logic
  * Overhaul: separated timestamp from revision number
  * Overhaul: eliminated timestamp order restriction
  * Overhaul: cleaned up RangeServer::update()
  * Check for bad column name in ScanSpec and throw exception
  * Upgraded to Hadoop 0.18.1
  * Add support for qualified columns in LOAD DATA INFILE
  * Got SELECT ... INTO FILE working again
  * Updated README to include log4cpp patch instructions
  * Fixed NULL pointer deref in BMZ on uncompressible data
  * [issue154] Fixed problem in MergeScanner causing max_versions probs
  * Fixed retry logic inside IntervalScanner
  * Added a RangeServer::get_statistics() method and rsstat tool (Donald)
  * Fixed a number of issues getting KFS broker up and running
  * Modified Capfile to allow a dfs= variable override to specify which dfs.
  * Modified scripts to only test for servers on localhost

Version 0.9.0.10:
(2008-08-14)

  * Fixed range loss problem when can't write RSML during split
  * Fixed Hyperspace to retry txn upon BDB deadlock exception
  * Fixed a bug in RangeServer::schedule_log_cleanup_compactions that prevents log cleanup compactions from happening. (thanks Donald)
  * Made Hyperspace client throw exceptions
  * Changed epoll to level triggered for < 2.6.17, edge triggered for newer
  * Fixed problem in HdfsBroker which caused it to close all handles
  * Fixed problem with accept() logic in edge-triggered mode
  * Fixed problem in FindBerkeleyDB.cmake also fixed link problem in dfsclient
  * Got rid of all calls to rand(), etc.  More work on random benchmark tools
  * Moved rand startup wait out of RangeServer and into Capistrano
  * Added full deprecation warnings to build
  * Eliminated infinite loop in AsyncComm; Fixed HdfsBroker shutdown
  * Upgraded TableReader::next(...) output values so that not only key but also column family and qualifiers are known to the reducer
  * Initial checkin of freebase example

Version 0.9.0.9:
(2008-08-03)

  * Fixed Linux epoll problems
  * Removed deadlock in Master::drop_table()
  * Modified shutdown scripts to wait for service shutdown before returning
  * Changed default listen() pending connection backlock from 64 to 1000
  * Modified RangeServers to wait random interval [0..2] secs before starting

Version 0.9.0.8:
(2008-08-01)

  * Added schema cloning (CREATE TABLE x LIKE y) (thanks to bithckr)
  * Fixed a potential macro redefinition in compat-c.h (thanks to Leon Mergen)
  * Clarified some documentation based on user feedback
  * Added fix for ignored 'try' in Hyperspace try_lock (thanks to liaoguangxian)
  * Added CELL expressions
  * Fixed bad reference to freed Hyperspace Session object
  * ported mapreduce connector to the newer API
  * Changed Hypertable::Client constructor to accept install dir
  * Got TableScanner working with multiple row intervals
  * Overhauled HQL WHERE clause (scan predicate)
  * Modified ScanSpec to include vector of row ranges; Added ScanSpecBuilder
  * Set TOS field on Hyperspace UDP packets to Minimize delay
  * Fixed deadlock issues in RangeServer during replay
  * Added drop_table RangeMetaLog entry
  * Overhauled launch scripts; Upgraded to Hadoop 0.17.1
  * Avoid using fs->length(path) to judge whether a RangeServerMetaLog file is empty, which doesn't work well in Hadoop DFS.
  * Fixed a bug in Read/PositionRead due to misuse of readFully().

Version 0.9.0.7:
(2008-07-18)

  * Got RangeServer recovery working
  * Added shutdown command to hypertable command interpreter
  * Fixed ApplicationQueue spin problem (c++ & java) plus other bugs
  * Merged in Mateusz Berezecki's Hadoop MapReduce contribution
  * Added random_write_test
  * Made Comm a singleton as intended
  * Added explicit Hyperspace session destroy mechanism
  * Changed epoll usage from level to edge triggered
  * Added option to preserve key columns as regular columns
  * Upgraded to latest KFS code
  * Check for and throw exception on bad scan spec (start > end)
  * Added ROW_UNIQUIFY_CHARS option to LOAD DATA INFILE
  * Added utility to dump metalog
  * Added convenient constructor (host, port) for DfsBroker client.
  * Added version check in case of shared libraries
  * Added Hypertable::Config to make init easier
  * Added a regression test to ensure that deletes are retroactively applied
  * [issue 120] Fixed problem with MergeScanner not properly handling deletes
  * [issue 118] Fixed segfault on empty .tsv line; Fixed output supress flags
  * [issue 119] Fixed problem where end timestamp was getting ignored
  * Doc: added notes on shared library install usage.
  * Cleanup build documentation
  * Avoid hash_value redefintion with boost 1.35+
  * Build: link libraries cleanup
  * [issue 115] Fixed Hyperspace Berkeley DB deadlock problem
  * Fixed Master error handling logic in create_table
  * Fixed link problem on XCode 2.4
  * Added RangeServer metalog classes and tests
  * Use native 'exists' instead of 'get' for BDB FS 'exists' calls.
  * Made BDB FS do basic recovery on init
  * Added support to print "pretty functions" in exception trace
  * Changed TableIdentifierCopy etc. to *Managed for what they really are
  * Added some documentation for tricky part of DynamicBuffer
  * Updated serialization test for str16 and bytes32
  * remove HT_TRY_DECODE in favor of HT_TRY
  * Added script to find & replace with perl regex
  * Coding convention/guideline sweep

Version 0.9.0.6:
(2008-06-14)

  * Ported Hyperspace to Berkeley DB
  * Fixed core dump in HdfsBroker when --verbose is not set
  * [issue 110] Fixed scanner infinite looping on large objects
  * Fixed buffer overrun problem in Hyperspace keepalive message
  * Cleaned up TableMutator retry logic
  * Made cmake 2.6 compatible.

Version 0.9.0.5:
(2008-06-03)

  * Made size of location cache configurable; set default to 1M
  * [issue 67] fixed bad free in comm layer
  * Fixed log fragment GC problem
  * Fixed race condition in LocalBroker::close()
  * Fixed doxygen comments; Updated Doxyfile to exclude boost fix dir
  * [issue 99] Added TableMutator::retry()
  * [issue 18] Added support for '~' expansion in hypertable
  * [issue 10] Implemented proper serialization for Serialization.h functions
  * [Issue 104] Fixed hang problem in HdfsBroker
  * Changed serialization byte ordering to little endian
  * Purge old cells to avoid repeated deletion of old files
  * Various portability fixes
  * [Issue 71] Fixed lagging scanners referencing GC'd CellStore problem
  * Added release callback to MergeScanner
  * Added GC support for issue 71 (race condition while compaction/scanning)
  * Added Filesystem::rename and friends
  * Added flush option to Filesystem::append and friends
  * [issue 41] Fixed CellCache::purge_deletes problem
  * Got RANGESERVER_ROW_OVERFLOW error propagating back to client
  * Upgraged to Hadoop 0.16.4
  * Overhauled Client library to send errors back as deltas
  * Added mutex class to accomodate changes in boost 1.35+
  * Fixed ambiguous operator+ overload problem
  * Created new StaticBuffer class which is now used in all internal APIs
  * Added destructor to Buffer class
  * Cleaned up DynamicBuffer and Buffer
  * Rearranged for better branch prediction in encoded_length_vi*
  * Switched to a more reliable signal facility (sigaction)
  * Got rid of some warnings on release build
  * Fixed compile problem on Ubuntu
  * Got rid of ByteString32 in favor of vint ByteString
  * Moved Serialization.h and its tests to Common
  * Added decode_i8 and regression tests.
  * Refactored BufferT and ExtBufferT usages to use Common/Buffer
  * Changed format of buffer passed to replay_update();
  * Added portable serialization code:
  * Added support for exception chaining.
  * Changed append API to reflect the ownership change of write buffer
  * Added include for stricter compilers (e.g. gcc 4.1.2)
  * Changed TableIdentifierWrapper to TableIdentifierCopy
  * Got rid of the EncodedLength/Encode/Decode functions from Types.h
  * Implemented RangeServer::replay_update
  * Modified RangeServer::load_range to include RangeState object
  * Fixed some build problems on mac (because of newly added dependencies)
  * Enhanced LOAD DATA INFILE to accept alt. header file and zipped files
  * Fixed free memory used problem and got rid of warnings
  * Added REQUEST_TIMEOUT exception to client; upgraded to Hadoop 0.16.3
  * Added wrapper for high res time
  * Added timeouts to TableMutator and TableScanner
  * Changed RangeServerClient to throw exceptions
  * Made scan spec public fields naming consistent with the rest of the API
  * Logging cleanup; now redirectable; flushable; added stream macros
  * Made ReferenceCount noncopyable
  * Fixed a leaking corner case in Hypertable::format
  * Added RangeState and re-organized Range split logic
  * Added TableIdentifierWrapper and RangeState
  * Allow keys to be built from multiple columns in LOAD DATA INFILE
  * Fixed segfault caused by race condition in sampleClient
  * Commit log re-write
  * Fixed HdfsBroker::rmdir to return FileNotFound
  * Moved header checksum to end of header; Improved split row selection
  * FS interface cleanup. Use exception where appropriate.
  * Cleaned up BlockCompressionHeader code
  * Fixed bug in startup scripts related to hadoop upgrade
  * Fixed initialization order problem in RangeServer
  * Cleaned up CommitLog types and added doxygen comments
  * Added smart pointers to MetaLog readers
  * Finished adding exists method to DfsBroker client
  * Added exists() method to Filesystem interface; Upgraded to Hadoop 0.16.2
  * Fixed regressions due to the license preamble change
  * Wrap long lines in license preambles.
  * Delete cruft in attic along with the attic
  * Modified ApacheLogParser to handle .gz files
  * Put time formatting in a function for apache_log example
  * Changed ApacheLogEntryT to ApacheLogEntry
  * Cleaned up and improved apache_log example
  * Got rid of error codes in Client API in favor of exceptions
  * Types name change; Comment header update
  * First cut of meta log API
  * More build cleanups: move generic definitions outside gcc macros; support gcc 3.4.x
  * Use our faster implementations by default and rename wikipedia based impls to *_wp
  * Reorganized Range split logic for new MetaLog implementation
  * Fixed bug that was causing default CellStore compressor to be "none"
  * Changed so SplitPoint and SplitDir are passed through Master
  * Got rid of split_timestamp
  * Dropped timestamp from location string
  * Handle large files on 32-bit systems.
  * Fixed problem loading .tsv files > 2GB on Linux
  * Changed argument of RangeServer::drop_table to TableIdentifierT
  * Fixed IN_MEMORY loading problems (issue #66)
  * Fixed initialization problem in hypertable command interperter
  * Added replay commands to rsclient; Added RangeServer::drop_range()
  * Implemented RangeServer::replay_start and replay_commit
  * Got rid of boost program_options hack
  * Build and install cleanups.
  * Ported rsclient to new command line shell framework
  * Abstracted command line shell into class that can be shared
  * Fixed a few small (seemingly innocuous) issues in AsyncComm
  * Fixed memory tracking
  * Added complete TableIdentifier into CommitLog entry headers
  * Created TableInfoMap class to prepare for "replay" map
  * Added plumbing for RangeServer replay methods
  * Modified ScannerTimestampController to store Timestamp objects
  * Fixed FindBoost.cmake on Redhat 4u3
  * Changed CMakeLists.txt files to facilitate use of other malloc packages

Version 0.9.0.4:
(2008-02-27)

  * Added code to check boost and apply fixes if necessary
  * Fixed issue #47 Cleaned up DROP_TABLE handling in RangeServer and Client
  * Fixed issue #63 Dropped updates under concurrent loading
  * Fixed race condition in Master between server join & register
  * Fixed RangeServer hang after TIMESTAMP_ORDER_ERROR error
  * Fixed performance bug that was hurting random reads

Version 0.9.0.3:
(2008-02-19)

  * Fixed bug in MergeScanner where deletes were being wrongly applied
  * Detect and report "supplied timestamps not strictly increasing" error
  * Added testing options KEYS_ONLY and RETURN_DELETES to SELECT statement
  * Removed unused tests and associated data to bring source tarball below 20MB
  * Modified ApacheLogParser to return non-coliding timestamps for requests that happened in the same second

Version 0.9.0.2:
(2008-02-12)

  * Made all timestamps interpreted as GMT (issue #56)
  * Catch table scanner / mutator exceptions in Master GC logic (issue #55)
  * Fixed Master abort when last_table_id attribute of /hypertable/master not found
  * Modified kosmosBroker properties to be capitalized camel case

Version 0.9.0.1:
(2008-02-07)

  * Fixed compile errors on Ubuntu, FC5 and FC6
  * Got rid of AsyncComm regression dependency on /usr/share/dict/words
  * Fixed critical GC bu that deleting good MEATADATA rows
  * Fixed FindBoost.cmake to work if only .so files are installed
