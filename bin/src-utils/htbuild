#!/bin/bash
#
# Copyright (C) 2009  Luke Lu (llu@hypertable.org)
#
# This file is part of Hypertable.
#
# Hypertable is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# Hypertable is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hypertable. If not, see <http://www.gnu.org/licenses/>
#

# Setup minimal environment on a target machine and build binary packages
SELF=`type -p $0`

# default values
REPO_URL=git://scm.hypertable.org/pub/repos/hypertable.git
REPO_BRANCH=master
BUILD_TYPE=Release
TESTS=core
BUILD_SYS=`uname -s | tr A-Z a-z`
BUILD_MACH=`uname -m`
GENERATORS=

case $BUILD_MACH in
  i[3456]86)    BUILD_MACH=i386
esac

if [ -f /etc/debian_version ]; then
  TARGET=linux_with_deb
elif [ -f /etc/redhat-release ]; then
  TARGET=linux_with_rpm
fi

# helper functions
get() {
  url=$1
  out=${2:-`basename $url`}
  curl -L "$url" -o "$out"
}

install_cmake() {
  cmake --version && return 0
  [ -f cmake.installed ] && return 0
  get http://www.cmake.org/files/v2.6/cmake-2.6.4.tar.gz cmake.tgz
  tar zxf cmake.tgz
  (cd cmake-2.6.4 && ./bootstrap --prefix=/usr && make && make install) &&
  touch cmake.installed
}

install_log4cpp() {
  [ -f log4cpp.installed ] && return 0
  get http://sourceforge.net/projects/log4cpp/files/log4cpp-1.0.x%20%28current%29/log4cpp-1.0/log4cpp-1.0.tar.gz/download log4cpp.tgz
  tar zxf log4cpp.tgz
  (cd log4cpp-1.0 && ./configure && make && make install) &&
  touch log4cpp.installed
}

install_libunwind() {
  [ -f libunwind.installed ] && return 0
  get http://download.savannah.gnu.org/releases/libunwind/libunwind-0.99-beta.tar.gz libunwind.tgz
  tar zxf libunwind.tgz
  (cd libunwind-0.99-beta && bash configure && make && make install) &&
  touch libunwind.installed
}

install_tcmalloc() {
  [ -f tcmalloc.installed ] && return 0
  install_libunwind
  get http://google-perftools.googlecode.com/files/google-perftools-1.3.tar.gz tcmalloc.tgz
  tar zxf tcmalloc.tgz
  (cd google-perftools-1.3 && ./configure && make && make install) &&
  touch tcmalloc.installed
}

install_boost() {
  [ -f boost.installed ] && return 0
  get http://sourceforge.net/projects/boost/files/boost/1.39.0/boost_1_39_0.tar.bz2/download boost.tbz2
  tar jxf boost.tbz2
  (cd boost_1_39_0 && ./bootstrap.sh --with-libraries=filesystem,iostreams,program_options,system,thread && ./bjam install) && touch boost.installed
}

install_bdb() {
  [ -f bdb.installed ] && return 0
  get http://download.oracle.com/berkeley-db/db-4.7.25.tar.gz bdb.tgz
  tar zxf bdb.tgz
  (cd db-4.7.25/build_unix && ../dist/configure --enable-cxx && make &&
      make install && echo /usr/local/BerkeleyDB.4.7/lib \
      > /etc/ld.so.conf.d/bdb.conf) && touch bdb.installed
}

install_sigar() {
  [ -f sigar.installed ] && return 0
  name=hyperic-sigar-1.6.3
  get http://sourceforge.net/projects/sigar/files/sigar/1.6/$name.tar.gz/download sigar.tgz
  tar zxf sigar.tgz
  cp $name/sigar-bin/include/*.h /usr/local/include
  case $BUILD_MACH in
    i386|i686)  m=x86;;
    x86_64)     m=amd64;;
  esac
  cp $name/sigar-bin/lib/*sigar-$m-$BUILD_SYS.* /usr/local/lib &&
      echo /usr/local/lib > /etc/ld.so.conf.d/local.conf &&
      touch sigar.installed
}

install_thrift() {
  [ -f thrift.installed ] && return 0
  get http://hypertable.org/pub/thrift-r796538.tgz thrift.tgz
  tar zxf thrift.tgz
  (cd thrift && ./configure --without-py --without-perl --without-ruby &&
      make && make install) && touch thrift.installed
}

install_kfs() {
  [ -f kfs.installed ] && return 0
  svn co http://kosmosfs.svn.sourceforge.net/svnroot/kosmosfs/trunk@364 kfs
  (cd kfs && mv CMakeLists.txt CMakeLists.txt.orig &&
      sed -e 's/_VERSIONS "1.37" "1.38")/_VERSIONS "1.37" "1.38" "1.39")/' \
          -e 's/NOT ${JAVA_INCLUDE_PATH} STREQUAL ""/JAVA_INCLUDE_PATH/' \
          CMakeLists.txt.orig > CMakeLists.txt &&
      mkdir -p build && cd build &&
      cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=/opt/kfs .. &&
      make install) && touch kfs.installed
}

build_hypertable() {
  if [ -d hypertable ]; then
    (cd hypertable && git pull)
  else
    git clone $REPO_URL hypertable || exit 1
  fi
  cur_branch=`cd hypertable && git symbolic-ref HEAD | sed 's/^refs.heads.//'`
  if [ "$cur_branch" != "$REPO_BRANCH" ]; then
    (cd hypertable && git checkout -b $REPO_BRANCH origin/$REPO_BRANCH)
  fi
  mkdir -p hypertable/build
  case $TESTS in
    core|all)    runtests="make ${TESTS}tests";;
    skip)        runtests=/bin/true;;
    *) echo "Unknown tests: $TESTS, skipped"; runtests=/bin/true;;
  esac
  (cd hypertable/build && cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE .. &&
      make install && $runtests &&
      ../bin/src-utils/htpkg --srcdir .. --build $BUILD_TYPE $GENERATORS)
}

disable_prelink() {
  if [ -f /etc/sysconfig/prelink ]; then
    (cd /etc/sysconfig && mv prelink prelink.orig &&
        sed 's/PRELINKING=yes/PRELINKING=no/' prelink.orig > prelink)
    prelink -ua
  fi
}

rpm_setup_repos() {
  disable_prelink
  yum install -y curl curl-devel
}

install_dev_env_from_src() {
  install_cmake
  install_log4cpp
  install_tcmalloc
  install_boost
  install_bdb
  install_sigar
  install_thrift
  install_kfs
  # need to disable selinux (on fedora/centos etc.)
  type setenforce && setenforce 0
  ldconfig
}

rpm_install_dev_env() {
  yum install -y gcc-c++ make bzip2-devel zlib-devel expat-devel git-core \
      libevent-devel readline-devel ncurses-devel bison flex pkgconfig \
      subversion rpm-build xfsprogs-devel openssl-devel
  case `yum info cmake | grep Version:` in
    Version:*2.6*) yum install -y cmake;;
  esac
  install_dev_env_from_src
}

deb_setup_repos() {
  apt-get update
  apt-get install -y curl
}

deb_install_dev_env() {
  apt-get install -y g++ make git-core liblog4cpp5-dev libevent-dev zlib1g-dev \
      libbz2-dev libexpat1-dev libncurses-dev libreadline5-dev bison flex \
      pkg-config subversion xfslibs-dev libssl-dev
  touch log4cpp.installed
  case `aptitude show cmake | grep Version:` in
    Version:*2.6*) apt-get install -y cmake && touch cmake.installed;;
  esac
  install_dev_env_from_src
}

do_linux_with_rpm() {
  rpm_setup_repos
  rpm_install_dev_env
  build_hypertable
}

do_linux_with_deb() {
  deb_setup_repos
  deb_install_dev_env
  build_hypertable
}

do_remote() {
  [ "$BUILD_HOST" ] || { echo "--host <host> required"; exit 1; }
  while true; do
    scp $SSH_OPTS $SELF root@$BUILD_HOST:
    [ $? = 0 ] && break;
    echo "Waiting for $BUILD_HOST to be ready..."
    sleep 3
  done
  ssh $SSH_OPTS root@$BUILD_HOST bash -x `basename $SELF` --build $BUILD_TYPE \
      --repo $REPO_URL --branch $REPO_BRANCH --tests $TESTS $GENERATORS
  scp $SSH_OPTS root@$BUILD_HOST:hypertable/build/hypertable-* .
}

run_ami() {
  ec2-run-instances $1 -n 1 -k ht -g hypertable -t `instance_type $1` |
      grep ami- | cut -f2
}

instance_type() {
  # Amazon should pick the smallest instance type available for a 
  # given architecture if instance type is not specified
  t=`ec2-describe-images $1 | cut -f8`
  case $t in
    i386)       echo m1.small;;
    x86_64)     echo m1.large;;
    *)          echo "unknown instance type: $t"; exit 1;;
  esac
}

do_ami() {
  [ "$BUILD_AMI" ] || { echo "--ami <ami> required"; exit 1; }

  echo -n "Launching $BUILD_AMI "
  instance=`run_ami $BUILD_AMI`
  echo "=> $instance"
  [ "$instance" ] || exit 1

  while true; do
    echo "Waiting for $instance to come up..."
    sleep 3
    BUILD_HOST=`ec2-describe-instances $instance | grep ami- | cut -f4`
    [ "$BUILD_HOST" ] && break
  done
  echo "Instance hostname: $BUILD_HOST"

  # having to wait and type yes is annoying so:
  SSH_OPTS="-o StrictHostKeyChecking=no -o PasswordAuthentication=no"
  do_remote

  ec2-terminate-instances $instance
}

sanity_check() {
  type do_$TARGET > /dev/null || { echo "$TARGET not supported"; exit 1; }
  [ "$GENERATORS" ] || { echo "one or more generators required"; exit 1; }
}

[ $# -gt 0 ] || {
  echo "Usage: $0 [<Options>] generators..."
  echo "  Builds binary packages on Linux (soon others) based OS"
  echo ""
  echo "Options:"
  echo "  --ami <ami>           EC2 image name"
  echo "  --host <host>         Hostname of remote target"
  echo "  --target <target>     linux_with_deb|linux_with_rpm|remote|ami"
  echo "  --mach <machine>      i386|x86_64|etc..."
  echo "  --build <type>        Release|Debug|RelWithDebInfo"
  echo "  --repo <url>          git repo url"
  echo "  --branch <branch>     git repo branch"
  echo "  --tests <tests>       core|all|skip"
  exit 1;
}

while [ $# -gt 0 ]; do
  case $1 in
    --ami)      BUILD_AMI=$2;   shift;;
    --host)     BUILD_HOST=$2;  shift;;
    --target)   TARGET=$2;      shift;;
    --mach)     BUILD_MACH=$2;  shift;;
    --build)    BUILD_TYPE=$2;  shift;;
    --repo)     REPO_URL=$2;    shift;;
    --branch)   REPO_BRANCH=$2; shift;;
    --tests)    TESTS=$2;       shift;;
    -*) echo "unknown option $1"; exit;;
    *)  GENERATORS="$GENERATORS $1";;
  esac
  shift
done

sanity_check

echo "$0 started:" `date`
do_$TARGET
echo "$0 finished:" `date`
